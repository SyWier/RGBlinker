
RGBlinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003130  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080031f0  080031f0  000041f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003378  08003378  0000509c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003378  08003378  0000509c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003378  08003378  0000509c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003378  08003378  00004378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800337c  0800337c  0000437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08003380  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002158  2000009c  0800341c  0000509c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021f4  0800341c  000051f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c857  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224e  00000000  00000000  0001191b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  00013b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d4  00000000  00000000  000145b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014119  00000000  00000000  00014d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e618  00000000  00000000  00028e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c12b  00000000  00000000  000374b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b35e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000232c  00000000  00000000  000b3624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b5950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031d8 	.word	0x080031d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	080031d8 	.word	0x080031d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	230c      	movs	r3, #12
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f002 febc 	bl	8003180 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000408:	4b2b      	ldr	r3, [pc, #172]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 800040a:	4a2c      	ldr	r2, [pc, #176]	@ (80004bc <MX_ADC1_Init+0xc8>)
 800040c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800040e:	4b2a      	ldr	r3, [pc, #168]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000410:	22c0      	movs	r2, #192	@ 0xc0
 8000412:	0612      	lsls	r2, r2, #24
 8000414:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000416:	4b28      	ldr	r3, [pc, #160]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041c:	4b26      	ldr	r3, [pc, #152]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000422:	4b25      	ldr	r3, [pc, #148]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	0612      	lsls	r2, r2, #24
 8000428:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800042a:	4b23      	ldr	r3, [pc, #140]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 800042c:	2204      	movs	r2, #4
 800042e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000430:	4b21      	ldr	r3, [pc, #132]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000432:	2200      	movs	r2, #0
 8000434:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000436:	4b20      	ldr	r3, [pc, #128]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000438:	2200      	movs	r2, #0
 800043a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800043c:	4b1e      	ldr	r3, [pc, #120]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 800043e:	2200      	movs	r2, #0
 8000440:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000442:	4b1d      	ldr	r3, [pc, #116]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000444:	2201      	movs	r2, #1
 8000446:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000448:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 800044a:	2220      	movs	r2, #32
 800044c:	2100      	movs	r1, #0
 800044e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000450:	4b19      	ldr	r3, [pc, #100]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000456:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000458:	2200      	movs	r2, #0
 800045a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800045c:	4b16      	ldr	r3, [pc, #88]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 800045e:	222c      	movs	r2, #44	@ 0x2c
 8000460:	2100      	movs	r1, #0
 8000462:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000464:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000466:	2200      	movs	r2, #0
 8000468:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800046a:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 800046c:	2200      	movs	r2, #0
 800046e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000472:	223c      	movs	r2, #60	@ 0x3c
 8000474:	2100      	movs	r1, #0
 8000476:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000478:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 800047a:	2200      	movs	r2, #0
 800047c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047e:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fd89 	bl	8000f98 <HAL_ADC_Init>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800048a:	f000 fa97 	bl	80009bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VDDA;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	4a0b      	ldr	r2, [pc, #44]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000492:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2201      	movs	r2, #1
 8000498:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049a:	1d3a      	adds	r2, r7, #4
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 ff1f 	bl	80012e4 <HAL_ADC_ConfigChannel>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80004aa:	f000 fa87 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b004      	add	sp, #16
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	200000b8 	.word	0x200000b8
 80004bc:	40012400 	.word	0x40012400
 80004c0:	bc008000 	.word	0xbc008000

080004c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b08b      	sub	sp, #44	@ 0x2c
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004cc:	240c      	movs	r4, #12
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	0018      	movs	r0, r3
 80004d2:	231c      	movs	r3, #28
 80004d4:	001a      	movs	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	f002 fe52 	bl	8003180 <memset>
  if(adcHandle->Instance==ADC1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a11      	ldr	r2, [pc, #68]	@ (8000528 <HAL_ADC_MspInit+0x64>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d11b      	bne.n	800051e <HAL_ADC_MspInit+0x5a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2220      	movs	r2, #32
 80004ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2200      	movs	r2, #0
 80004f0:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 f835 	bl	8002564 <HAL_RCCEx_PeriphCLKConfig>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <HAL_ADC_MspInit+0x3e>
    {
      Error_Handler();
 80004fe:	f000 fa5d 	bl	80009bc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <HAL_ADC_MspInit+0x68>)
 8000504:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <HAL_ADC_MspInit+0x68>)
 8000508:	2180      	movs	r1, #128	@ 0x80
 800050a:	0349      	lsls	r1, r1, #13
 800050c:	430a      	orrs	r2, r1
 800050e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <HAL_ADC_MspInit+0x68>)
 8000512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000514:	2380      	movs	r3, #128	@ 0x80
 8000516:	035b      	lsls	r3, r3, #13
 8000518:	4013      	ands	r3, r2
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b00b      	add	sp, #44	@ 0x2c
 8000524:	bd90      	pop	{r4, r7, pc}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	40012400 	.word	0x40012400
 800052c:	40021000 	.word	0x40021000

08000530 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
void MX_DMA_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000536:	4b1b      	ldr	r3, [pc, #108]	@ (80005a4 <MX_DMA_Init+0x74>)
 8000538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800053a:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <MX_DMA_Init+0x74>)
 800053c:	2101      	movs	r1, #1
 800053e:	430a      	orrs	r2, r1
 8000540:	639a      	str	r2, [r3, #56]	@ 0x38
 8000542:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <MX_DMA_Init+0x74>)
 8000544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000546:	2201      	movs	r2, #1
 8000548:	4013      	ands	r3, r2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Channel1 */
  hdma_dma_generator0.Instance = DMA1_Channel1;
 800054e:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <MX_DMA_Init+0x78>)
 8000550:	4a16      	ldr	r2, [pc, #88]	@ (80005ac <MX_DMA_Init+0x7c>)
 8000552:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <MX_DMA_Init+0x78>)
 8000556:	2201      	movs	r2, #1
 8000558:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800055a:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <MX_DMA_Init+0x78>)
 800055c:	2210      	movs	r2, #16
 800055e:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000560:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <MX_DMA_Init+0x78>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x78>)
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_DMA_Init+0x78>)
 800056e:	2280      	movs	r2, #128	@ 0x80
 8000570:	0092      	lsls	r2, r2, #2
 8000572:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <MX_DMA_Init+0x78>)
 8000576:	2280      	movs	r2, #128	@ 0x80
 8000578:	0112      	lsls	r2, r2, #4
 800057a:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_CIRCULAR;
 800057c:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <MX_DMA_Init+0x78>)
 800057e:	2220      	movs	r2, #32
 8000580:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_HIGH;
 8000582:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <MX_DMA_Init+0x78>)
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	0192      	lsls	r2, r2, #6
 8000588:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 800058a:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <MX_DMA_Init+0x78>)
 800058c:	0018      	movs	r0, r3
 800058e:	f001 f933 	bl	80017f8 <HAL_DMA_Init>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <MX_DMA_Init+0x6a>
  {
    Error_Handler();
 8000596:	f000 fa11 	bl	80009bc <Error_Handler>
  }

}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	40021000 	.word	0x40021000
 80005a8:	2000011c 	.word	0x2000011c
 80005ac:	40020008 	.word	0x40020008

080005b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b089      	sub	sp, #36	@ 0x24
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	240c      	movs	r4, #12
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2314      	movs	r3, #20
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f002 fddd 	bl	8003180 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b45      	ldr	r3, [pc, #276]	@ (80006dc <MX_GPIO_Init+0x12c>)
 80005c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ca:	4b44      	ldr	r3, [pc, #272]	@ (80006dc <MX_GPIO_Init+0x12c>)
 80005cc:	2102      	movs	r1, #2
 80005ce:	430a      	orrs	r2, r1
 80005d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005d2:	4b42      	ldr	r3, [pc, #264]	@ (80006dc <MX_GPIO_Init+0x12c>)
 80005d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005d6:	2202      	movs	r2, #2
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b3f      	ldr	r3, [pc, #252]	@ (80006dc <MX_GPIO_Init+0x12c>)
 80005e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e2:	4b3e      	ldr	r3, [pc, #248]	@ (80006dc <MX_GPIO_Init+0x12c>)
 80005e4:	2104      	movs	r1, #4
 80005e6:	430a      	orrs	r2, r1
 80005e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ea:	4b3c      	ldr	r3, [pc, #240]	@ (80006dc <MX_GPIO_Init+0x12c>)
 80005ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ee:	2204      	movs	r2, #4
 80005f0:	4013      	ands	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b39      	ldr	r3, [pc, #228]	@ (80006dc <MX_GPIO_Init+0x12c>)
 80005f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005fa:	4b38      	ldr	r3, [pc, #224]	@ (80006dc <MX_GPIO_Init+0x12c>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	430a      	orrs	r2, r1
 8000600:	635a      	str	r2, [r3, #52]	@ 0x34
 8000602:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <MX_GPIO_Init+0x12c>)
 8000604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000606:	2201      	movs	r2, #1
 8000608:	4013      	ands	r3, r2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDA0_Pin|LEDA1_Pin|LEDA2_Pin|LEDA3_Pin
 800060e:	4934      	ldr	r1, [pc, #208]	@ (80006e0 <MX_GPIO_Init+0x130>)
 8000610:	23a0      	movs	r3, #160	@ 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2200      	movs	r2, #0
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fc2a 	bl	8001e70 <HAL_GPIO_WritePin>
                          |LEDK0_Pin|LEDK1_Pin|LEDK2_Pin|LEDK3_Pin
                          |LEDK4_Pin|LEDK5_Pin|LEDK6_Pin|LEDK7_Pin
                          |LEDK8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_RESET);
 800061c:	4b31      	ldr	r3, [pc, #196]	@ (80006e4 <MX_GPIO_Init+0x134>)
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fc24 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB0 PB1 PB4
                           PB5 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
 8000628:	193b      	adds	r3, r7, r4
 800062a:	4a2f      	ldr	r2, [pc, #188]	@ (80006e8 <MX_GPIO_Init+0x138>)
 800062c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2203      	movs	r2, #3
 8000632:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	193b      	adds	r3, r7, r4
 800063c:	4a29      	ldr	r2, [pc, #164]	@ (80006e4 <MX_GPIO_Init+0x134>)
 800063e:	0019      	movs	r1, r3
 8000640:	0010      	movs	r0, r2
 8000642:	f001 faa3 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_6;
 8000646:	193b      	adds	r3, r7, r4
 8000648:	4a28      	ldr	r2, [pc, #160]	@ (80006ec <MX_GPIO_Init+0x13c>)
 800064a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2203      	movs	r2, #3
 8000650:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000658:	193b      	adds	r3, r7, r4
 800065a:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <MX_GPIO_Init+0x140>)
 800065c:	0019      	movs	r1, r3
 800065e:	0010      	movs	r0, r2
 8000660:	f001 fa94 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA0_Pin LEDA1_Pin LEDA2_Pin LEDA3_Pin
                           LEDK0_Pin LEDK1_Pin LEDK2_Pin LEDK3_Pin
                           LEDK4_Pin LEDK5_Pin LEDK6_Pin LEDK7_Pin
                           LEDK8_Pin */
  GPIO_InitStruct.Pin = LEDA0_Pin|LEDA1_Pin|LEDA2_Pin|LEDA3_Pin
 8000664:	193b      	adds	r3, r7, r4
 8000666:	4a1e      	ldr	r2, [pc, #120]	@ (80006e0 <MX_GPIO_Init+0x130>)
 8000668:	601a      	str	r2, [r3, #0]
                          |LEDK0_Pin|LEDK1_Pin|LEDK2_Pin|LEDK3_Pin
                          |LEDK4_Pin|LEDK5_Pin|LEDK6_Pin|LEDK7_Pin
                          |LEDK8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2201      	movs	r2, #1
 800066e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	193a      	adds	r2, r7, r4
 800067e:	23a0      	movs	r3, #160	@ 0xa0
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f001 fa81 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2280      	movs	r2, #128	@ 0x80
 800068e:	0212      	lsls	r2, r2, #8
 8000690:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2203      	movs	r2, #3
 8000696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	23a0      	movs	r3, #160	@ 0xa0
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 fa70 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_3V3_Pin */
  GPIO_InitStruct.Pin = EN_3V3_Pin;
 80006ac:	0021      	movs	r1, r4
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2208      	movs	r2, #8
 80006b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2201      	movs	r2, #1
 80006b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_3V3_GPIO_Port, &GPIO_InitStruct);
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <MX_GPIO_Init+0x134>)
 80006ca:	0019      	movs	r1, r3
 80006cc:	0010      	movs	r0, r2
 80006ce:	f001 fa5d 	bl	8001b8c <HAL_GPIO_Init>

}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b009      	add	sp, #36	@ 0x24
 80006d8:	bd90      	pop	{r4, r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	40021000 	.word	0x40021000
 80006e0:	00001fff 	.word	0x00001fff
 80006e4:	50000400 	.word	0x50000400
 80006e8:	000003b3 	.word	0x000003b3
 80006ec:	00008040 	.word	0x00008040
 80006f0:	50000800 	.word	0x50000800

080006f4 <GenerateBuffer>:

// Macros for buffer generation
#define ANODE_PIN(row)     (1U << (row))
#define CATHODE_PIN(col)   (1U << ((col) + LED_ROWS))

void GenerateBuffer(uint8_t frame[][LED_NUM]) {
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	b089      	sub	sp, #36	@ 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	// Delete buffer (keep upper bits)
	// LED anode, cathode HIGH -> Turn OFF
	uint32_t reg = GPIOA->ODR | 0x1FFF;
 80006fc:	23a0      	movs	r3, #160	@ 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a56      	ldr	r2, [pc, #344]	@ (800085c <GenerateBuffer+0x168>)
 8000704:	4313      	orrs	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
 800070c:	e00f      	b.n	800072e <GenerateBuffer+0x3a>
		LedBuffer[BufferSelect][i] = reg;
 800070e:	4b54      	ldr	r3, [pc, #336]	@ (8000860 <GenerateBuffer+0x16c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	0019      	movs	r1, r3
 8000714:	4a53      	ldr	r2, [pc, #332]	@ (8000864 <GenerateBuffer+0x170>)
 8000716:	000b      	movs	r3, r1
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	1a5b      	subs	r3, r3, r1
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	69f9      	ldr	r1, [r7, #28]
 8000720:	185b      	adds	r3, r3, r1
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	68f9      	ldr	r1, [r7, #12]
 8000726:	5099      	str	r1, [r3, r2]
	for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	3301      	adds	r3, #1
 800072c:	61fb      	str	r3, [r7, #28]
 800072e:	69fa      	ldr	r2, [r7, #28]
 8000730:	23ff      	movs	r3, #255	@ 0xff
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	429a      	cmp	r2, r3
 8000736:	d3ea      	bcc.n	800070e <GenerateBuffer+0x1a>
	}

	// Generate buffer
	for (uint32_t row = 0; row < LED_ROWS; row++) { // Select row
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	e084      	b.n	8000848 <GenerateBuffer+0x154>
		for (uint32_t led = 0; led < LED_NUM; led++) { // Select LED
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	e07a      	b.n	800083a <GenerateBuffer+0x146>

			// PWM number between 0-255
			uint8_t pwm = gamma_lut[frame[row][led]];
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	0013      	movs	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	189b      	adds	r3, r3, r2
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	18d2      	adds	r2, r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	18d3      	adds	r3, r2, r3
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	0019      	movs	r1, r3
 8000758:	230b      	movs	r3, #11
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	4a42      	ldr	r2, [pc, #264]	@ (8000868 <GenerateBuffer+0x174>)
 800075e:	5c52      	ldrb	r2, [r2, r1]
 8000760:	701a      	strb	r2, [r3, #0]

			// Set LED values
			for (uint16_t n = 0; n < pwm; n++) {
 8000762:	2312      	movs	r3, #18
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	e05a      	b.n	8000822 <GenerateBuffer+0x12e>
				LedBuffer[BufferSelect][row * LED_PWM_MAX + n] &= ~ANODE_PIN(row); // LED anode
 800076c:	4b3c      	ldr	r3, [pc, #240]	@ (8000860 <GenerateBuffer+0x16c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	0018      	movs	r0, r3
 8000772:	69ba      	ldr	r2, [r7, #24]
 8000774:	0013      	movs	r3, r2
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	1a9a      	subs	r2, r3, r2
 800077a:	2612      	movs	r6, #18
 800077c:	19bb      	adds	r3, r7, r6
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	18d1      	adds	r1, r2, r3
 8000782:	4a38      	ldr	r2, [pc, #224]	@ (8000864 <GenerateBuffer+0x170>)
 8000784:	0003      	movs	r3, r0
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	1a1b      	subs	r3, r3, r0
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	185b      	adds	r3, r3, r1
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	5899      	ldr	r1, [r3, r2]
 8000792:	2201      	movs	r2, #1
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	409a      	lsls	r2, r3
 8000798:	0013      	movs	r3, r2
 800079a:	43dc      	mvns	r4, r3
 800079c:	4b30      	ldr	r3, [pc, #192]	@ (8000860 <GenerateBuffer+0x16c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	001d      	movs	r5, r3
 80007a2:	69ba      	ldr	r2, [r7, #24]
 80007a4:	0013      	movs	r3, r2
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	1a9a      	subs	r2, r3, r2
 80007aa:	19bb      	adds	r3, r7, r6
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	18d0      	adds	r0, r2, r3
 80007b0:	4021      	ands	r1, r4
 80007b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000864 <GenerateBuffer+0x170>)
 80007b4:	002b      	movs	r3, r5
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	1b5b      	subs	r3, r3, r5
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	181b      	adds	r3, r3, r0
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	5099      	str	r1, [r3, r2]
				LedBuffer[BufferSelect][row * LED_PWM_MAX + n] &= ~CATHODE_PIN(led); // LED cathode
 80007c2:	4b27      	ldr	r3, [pc, #156]	@ (8000860 <GenerateBuffer+0x16c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	0018      	movs	r0, r3
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	0013      	movs	r3, r2
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	1a9a      	subs	r2, r3, r2
 80007d0:	19bb      	adds	r3, r7, r6
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	18d1      	adds	r1, r2, r3
 80007d6:	4a23      	ldr	r2, [pc, #140]	@ (8000864 <GenerateBuffer+0x170>)
 80007d8:	0003      	movs	r3, r0
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	1a1b      	subs	r3, r3, r0
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	185b      	adds	r3, r3, r1
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	5899      	ldr	r1, [r3, r2]
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3304      	adds	r3, #4
 80007ea:	2201      	movs	r2, #1
 80007ec:	409a      	lsls	r2, r3
 80007ee:	0013      	movs	r3, r2
 80007f0:	43dc      	mvns	r4, r3
 80007f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <GenerateBuffer+0x16c>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	001d      	movs	r5, r3
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	0013      	movs	r3, r2
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	1a9a      	subs	r2, r3, r2
 8000800:	19bb      	adds	r3, r7, r6
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	18d0      	adds	r0, r2, r3
 8000806:	4021      	ands	r1, r4
 8000808:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <GenerateBuffer+0x170>)
 800080a:	002b      	movs	r3, r5
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	1b5b      	subs	r3, r3, r5
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	181b      	adds	r3, r3, r0
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	5099      	str	r1, [r3, r2]
			for (uint16_t n = 0; n < pwm; n++) {
 8000818:	19bb      	adds	r3, r7, r6
 800081a:	881a      	ldrh	r2, [r3, #0]
 800081c:	19bb      	adds	r3, r7, r6
 800081e:	3201      	adds	r2, #1
 8000820:	801a      	strh	r2, [r3, #0]
 8000822:	230b      	movs	r3, #11
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2212      	movs	r2, #18
 800082c:	18ba      	adds	r2, r7, r2
 800082e:	8812      	ldrh	r2, [r2, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	d39b      	bcc.n	800076c <GenerateBuffer+0x78>
		for (uint32_t led = 0; led < LED_NUM; led++) { // Select LED
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	3301      	adds	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	2b08      	cmp	r3, #8
 800083e:	d800      	bhi.n	8000842 <GenerateBuffer+0x14e>
 8000840:	e780      	b.n	8000744 <GenerateBuffer+0x50>
	for (uint32_t row = 0; row < LED_ROWS; row++) { // Select row
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	3301      	adds	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d800      	bhi.n	8000850 <GenerateBuffer+0x15c>
 800084e:	e776      	b.n	800073e <GenerateBuffer+0x4a>
			}
		}
	}
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b009      	add	sp, #36	@ 0x24
 8000858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	00001fff 	.word	0x00001fff
 8000860:	20002158 	.word	0x20002158
 8000864:	20000178 	.word	0x20000178
 8000868:	080031f0 	.word	0x080031f0

0800086c <LedDrive>:

void LedDrive() {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	HAL_DMA_Abort(&hdma_dma_generator0);
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <LedDrive+0x50>)
 8000872:	0018      	movs	r0, r3
 8000874:	f001 f898 	bl	80019a8 <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_dma_generator0, (uint32_t)LedBuffer[BufferSelect], (uint32_t)&(GPIOA->ODR), BUFFER_SIZE);
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <LedDrive+0x54>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	001a      	movs	r2, r3
 800087e:	0013      	movs	r3, r2
 8000880:	021b      	lsls	r3, r3, #8
 8000882:	1a9b      	subs	r3, r3, r2
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	4a0f      	ldr	r2, [pc, #60]	@ (80008c4 <LedDrive+0x58>)
 8000888:	189b      	adds	r3, r3, r2
 800088a:	0019      	movs	r1, r3
 800088c:	23ff      	movs	r3, #255	@ 0xff
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4a0d      	ldr	r2, [pc, #52]	@ (80008c8 <LedDrive+0x5c>)
 8000892:	480a      	ldr	r0, [pc, #40]	@ (80008bc <LedDrive+0x50>)
 8000894:	f001 f83a 	bl	800190c <HAL_DMA_Start>
	BufferSelect = !BufferSelect;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <LedDrive+0x54>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	4193      	sbcs	r3, r2
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2201      	movs	r2, #1
 80008a4:	4053      	eors	r3, r2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	1c1a      	adds	r2, r3, #0
 80008aa:	2301      	movs	r3, #1
 80008ac:	4013      	ands	r3, r2
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <LedDrive+0x54>)
 80008b2:	701a      	strb	r2, [r3, #0]
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	2000011c 	.word	0x2000011c
 80008c0:	20002158 	.word	0x20002158
 80008c4:	20000178 	.word	0x20000178
 80008c8:	50000014 	.word	0x50000014

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 f9c2 	bl	8000c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f825 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f7ff fe69 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008de:	f7ff fe27 	bl	8000530 <MX_DMA_Init>
  MX_ADC1_Init();
 80008e2:	f7ff fd87 	bl	80003f4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80008e6:	f000 f8b9 	bl	8000a5c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i = 0; i < 4; i++) {
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	e013      	b.n	8000918 <main+0x4c>
		  GenerateBuffer(LedFrame[i]);
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	0013      	movs	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	189b      	adds	r3, r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <main+0x54>)
 80008fc:	189b      	adds	r3, r3, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f7ff fef8 	bl	80006f4 <GenerateBuffer>
		  LedDrive();
 8000904:	f7ff ffb2 	bl	800086c <LedDrive>
		  HAL_Delay(1000);
 8000908:	23fa      	movs	r3, #250	@ 0xfa
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fa21 	bl	8000d54 <HAL_Delay>
	  for(int i = 0; i < 4; i++) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b03      	cmp	r3, #3
 800091c:	dde8      	ble.n	80008f0 <main+0x24>
 800091e:	e7e4      	b.n	80008ea <main+0x1e>
 8000920:	20000000 	.word	0x20000000

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b08d      	sub	sp, #52	@ 0x34
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	2414      	movs	r4, #20
 800092c:	193b      	adds	r3, r7, r4
 800092e:	0018      	movs	r0, r3
 8000930:	231c      	movs	r3, #28
 8000932:	001a      	movs	r2, r3
 8000934:	2100      	movs	r1, #0
 8000936:	f002 fc23 	bl	8003180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093a:	003b      	movs	r3, r7
 800093c:	0018      	movs	r0, r3
 800093e:	2314      	movs	r3, #20
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f002 fc1c 	bl	8003180 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <SystemClock_Config+0x94>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <SystemClock_Config+0x94>)
 800094e:	2107      	movs	r1, #7
 8000950:	438a      	bics	r2, r1
 8000952:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2202      	movs	r2, #2
 8000958:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	0052      	lsls	r2, r2, #1
 8000960:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV16;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2280      	movs	r2, #128	@ 0x80
 8000966:	0192      	lsls	r2, r2, #6
 8000968:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2240      	movs	r2, #64	@ 0x40
 800096e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	193b      	adds	r3, r7, r4
 8000972:	0018      	movs	r0, r3
 8000974:	f001 fa9a 	bl	8001eac <HAL_RCC_OscConfig>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800097c:	f000 f81e 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000980:	003b      	movs	r3, r7
 8000982:	2207      	movs	r2, #7
 8000984:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000986:	003b      	movs	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	003b      	movs	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000992:	003b      	movs	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000998:	003b      	movs	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800099e:	003b      	movs	r3, r7
 80009a0:	2100      	movs	r1, #0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 fc66 	bl	8002274 <HAL_RCC_ClockConfig>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009ac:	f000 f806 	bl	80009bc <Error_Handler>
  }
}
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b00d      	add	sp, #52	@ 0x34
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	40022000 	.word	0x40022000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	46c0      	nop			@ (mov r8, r8)
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_MspInit+0x44>)
 80009d4:	2101      	movs	r1, #1
 80009d6:	430a      	orrs	r2, r1
 80009d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	2201      	movs	r2, #1
 80009e0:	4013      	ands	r3, r2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_MspInit+0x44>)
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0549      	lsls	r1, r1, #21
 80009f0:	430a      	orrs	r2, r1
 80009f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <HAL_MspInit+0x44>)
 80009f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009f8:	2380      	movs	r3, #128	@ 0x80
 80009fa:	055b      	lsls	r3, r3, #21
 80009fc:	4013      	ands	r3, r2
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	40021000 	.word	0x40021000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f970 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <SystemInit+0x14>)
 8000a4a:	2280      	movs	r2, #128	@ 0x80
 8000a4c:	0512      	lsls	r2, r2, #20
 8000a4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a60:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a62:	4a24      	ldr	r2, [pc, #144]	@ (8000af4 <MX_USART1_UART_Init+0x98>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8000a66:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a68:	2296      	movs	r2, #150	@ 0x96
 8000a6a:	0152      	lsls	r2, r2, #5
 8000a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 fe48 	bl	800273c <HAL_UART_Init>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f7ff ff84 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f002 fa81 	bl	8002fc0 <HAL_UARTEx_SetTxFifoThreshold>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac2:	f7ff ff7b 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f002 fab8 	bl	8003040 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f7ff ff72 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <MX_USART1_UART_Init+0x94>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fa36 	bl	8002f4c <HAL_UARTEx_DisableFifoMode>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f7ff ff6a 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	2000215c 	.word	0x2000215c
 8000af4:	40013800 	.word	0x40013800

08000af8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b093      	sub	sp, #76	@ 0x4c
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	2334      	movs	r3, #52	@ 0x34
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	0018      	movs	r0, r3
 8000b06:	2314      	movs	r3, #20
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f002 fb38 	bl	8003180 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	2418      	movs	r4, #24
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	0018      	movs	r0, r3
 8000b16:	231c      	movs	r3, #28
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f002 fb30 	bl	8003180 <memset>
  if(uartHandle->Instance==USART1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a34      	ldr	r2, [pc, #208]	@ (8000bf8 <HAL_UART_MspInit+0x100>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d161      	bne.n	8000bee <HAL_UART_MspInit+0xf6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 fd13 	bl	8002564 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b42:	f7ff ff3b 	bl	80009bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b46:	4b2d      	ldr	r3, [pc, #180]	@ (8000bfc <HAL_UART_MspInit+0x104>)
 8000b48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bfc <HAL_UART_MspInit+0x104>)
 8000b4c:	2180      	movs	r1, #128	@ 0x80
 8000b4e:	01c9      	lsls	r1, r1, #7
 8000b50:	430a      	orrs	r2, r1
 8000b52:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b54:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <HAL_UART_MspInit+0x104>)
 8000b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b58:	2380      	movs	r3, #128	@ 0x80
 8000b5a:	01db      	lsls	r3, r3, #7
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <HAL_UART_MspInit+0x104>)
 8000b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b66:	4b25      	ldr	r3, [pc, #148]	@ (8000bfc <HAL_UART_MspInit+0x104>)
 8000b68:	2104      	movs	r1, #4
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b6e:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <HAL_UART_MspInit+0x104>)
 8000b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b72:	2204      	movs	r2, #4
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <HAL_UART_MspInit+0x104>)
 8000b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <HAL_UART_MspInit+0x104>)
 8000b80:	2102      	movs	r1, #2
 8000b82:	430a      	orrs	r2, r1
 8000b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <HAL_UART_MspInit+0x104>)
 8000b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin;
 8000b92:	2134      	movs	r1, #52	@ 0x34
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	01d2      	lsls	r2, r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	000c      	movs	r4, r1
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DEBUG_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	4a11      	ldr	r2, [pc, #68]	@ (8000c00 <HAL_UART_MspInit+0x108>)
 8000bba:	0019      	movs	r1, r3
 8000bbc:	0010      	movs	r0, r2
 8000bbe:	f000 ffe5 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DEBUG_UART_RX_Pin;
 8000bc2:	0021      	movs	r1, r4
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2202      	movs	r2, #2
 8000bce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DEBUG_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000be6:	0019      	movs	r1, r3
 8000be8:	0010      	movs	r0, r2
 8000bea:	f000 ffcf 	bl	8001b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b013      	add	sp, #76	@ 0x4c
 8000bf4:	bd90      	pop	{r4, r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	40013800 	.word	0x40013800
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	50000800 	.word	0x50000800
 8000c04:	50000400 	.word	0x50000400

08000c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c08:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c0c:	f7ff ff1a 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c12:	e003      	b.n	8000c1c <LoopCopyDataInit>

08000c14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000c16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c1a:	3104      	adds	r1, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c1c:	480a      	ldr	r0, [pc, #40]	@ (8000c48 <LoopForever+0xa>)
  ldr r3, =_edata
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <LoopForever+0xe>)
  adds r2, r0, r1
 8000c20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c24:	d3f6      	bcc.n	8000c14 <CopyDataInit>
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopForever+0x12>)
  b LoopFillZerobss
 8000c28:	e002      	b.n	8000c30 <LoopFillZerobss>

08000c2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c2c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2e:	3204      	adds	r2, #4

08000c30 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <LoopForever+0x16>)
  cmp r2, r3
 8000c32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c34:	d3f9      	bcc.n	8000c2a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c36:	f002 faab 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3a:	f7ff fe47 	bl	80008cc <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   r0, =_estack
 8000c40:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000c44:	08003380 	.word	0x08003380
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c4c:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 8000c50:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 8000c54:	200021f4 	.word	0x200021f4

08000c58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_IRQHandler>

08000c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c66:	2003      	movs	r0, #3
 8000c68:	f000 f80e 	bl	8000c88 <HAL_InitTick>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c78:	f7ff fea6 	bl	80009c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c90:	230f      	movs	r3, #15
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000c98:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <HAL_InitTick+0x88>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d02b      	beq.n	8000cf8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_InitTick+0x8c>)
 8000ca2:	681c      	ldr	r4, [r3, #0]
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <HAL_InitTick+0x88>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	0019      	movs	r1, r3
 8000caa:	23fa      	movs	r3, #250	@ 0xfa
 8000cac:	0098      	lsls	r0, r3, #2
 8000cae:	f7ff fa2b 	bl	8000108 <__udivsi3>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	f7ff fa26 	bl	8000108 <__udivsi3>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fd8d 	bl	80017de <HAL_SYSTICK_Config>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d112      	bne.n	8000cee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d80a      	bhi.n	8000ce4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	425b      	negs	r3, r3
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fd6c 	bl	80017b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <HAL_InitTick+0x90>)
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	e00d      	b.n	8000d00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e008      	b.n	8000d00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cee:	230f      	movs	r3, #15
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e003      	b.n	8000d00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d00:	230f      	movs	r3, #15
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	781b      	ldrb	r3, [r3, #0]
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b005      	add	sp, #20
 8000d0c:	bd90      	pop	{r4, r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	20000098 	.word	0x20000098
 8000d14:	20000090 	.word	0x20000090
 8000d18:	20000094 	.word	0x20000094

08000d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_IncTick+0x1c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	001a      	movs	r2, r3
 8000d26:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	18d2      	adds	r2, r2, r3
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	20000098 	.word	0x20000098
 8000d3c:	200021f0 	.word	0x200021f0

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b02      	ldr	r3, [pc, #8]	@ (8000d50 <HAL_GetTick+0x10>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	200021f0 	.word	0x200021f0

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff fff0 	bl	8000d40 <HAL_GetTick>
 8000d60:	0003      	movs	r3, r0
 8000d62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	001a      	movs	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	189b      	adds	r3, r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	f7ff ffe0 	bl	8000d40 <HAL_GetTick>
 8000d80:	0002      	movs	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	20000098 	.word	0x20000098

08000d9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000dac:	401a      	ands	r2, r3
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	601a      	str	r2, [r3, #0]
}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	ff3fffff 	.word	0xff3fffff

08000dc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	23c0      	movs	r3, #192	@ 0xc0
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	4013      	ands	r3, r2
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	2104      	movs	r1, #4
 8000df2:	400a      	ands	r2, r1
 8000df4:	2107      	movs	r1, #7
 8000df6:	4091      	lsls	r1, r2
 8000df8:	000a      	movs	r2, r1
 8000dfa:	43d2      	mvns	r2, r2
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2104      	movs	r1, #4
 8000e02:	400b      	ands	r3, r1
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	4099      	lsls	r1, r3
 8000e08:	000b      	movs	r3, r1
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e10:	46c0      	nop			@ (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b004      	add	sp, #16
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	2104      	movs	r1, #4
 8000e2a:	400a      	ands	r2, r1
 8000e2c:	2107      	movs	r1, #7
 8000e2e:	4091      	lsls	r1, r2
 8000e30:	000a      	movs	r2, r1
 8000e32:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2104      	movs	r1, #4
 8000e38:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e3a:	40da      	lsrs	r2, r3
 8000e3c:	0013      	movs	r3, r2
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	211f      	movs	r1, #31
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	000a      	movs	r2, r1
 8000e62:	43d2      	mvns	r2, r2
 8000e64:	401a      	ands	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	0e9b      	lsrs	r3, r3, #26
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	4019      	ands	r1, r3
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	201f      	movs	r0, #31
 8000e72:	4003      	ands	r3, r0
 8000e74:	4099      	lsls	r1, r3
 8000e76:	000b      	movs	r3, r1
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	025b      	lsls	r3, r3, #9
 8000e98:	0a5b      	lsrs	r3, r3, #9
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	0252      	lsls	r2, r2, #9
 8000eba:	0a52      	lsrs	r2, r2, #9
 8000ebc:	43d2      	mvns	r2, r2
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	0212      	lsls	r2, r2, #8
 8000ee0:	43d2      	mvns	r2, r2
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	400b      	ands	r3, r1
 8000eec:	4904      	ldr	r1, [pc, #16]	@ (8000f00 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000eee:	400b      	ands	r3, r1
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b004      	add	sp, #16
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	7fffff00 	.word	0x7fffff00

08000f04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	2280      	movs	r2, #128	@ 0x80
 8000f16:	0552      	lsls	r2, r2, #21
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b002      	add	sp, #8
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	6fffffe8 	.word	0x6fffffe8

08000f2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	055b      	lsls	r3, r3, #21
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	055b      	lsls	r3, r3, #21
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d101      	bne.n	8000f4a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b002      	add	sp, #8
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2201      	movs	r2, #1
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <LL_ADC_IsEnabled+0x18>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <LL_ADC_IsEnabled+0x1a>
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2204      	movs	r2, #4
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d101      	bne.n	8000f8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	0018      	movs	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e17e      	b.n	80012bc <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10a      	bne.n	8000fdc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff fa7b 	bl	80004c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2254      	movs	r2, #84	@ 0x54
 8000fd8:	2100      	movs	r1, #0
 8000fda:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ffa3 	bl	8000f2c <LL_ADC_IsInternalRegulatorEnabled>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d114      	bne.n	8001014 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff ff88 	bl	8000f04 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ff4:	4bb3      	ldr	r3, [pc, #716]	@ (80012c4 <HAL_ADC_Init+0x32c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	49b3      	ldr	r1, [pc, #716]	@ (80012c8 <HAL_ADC_Init+0x330>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff f884 	bl	8000108 <__udivsi3>
 8001000:	0003      	movs	r3, r0
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001006:	e002      	b.n	800100e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3b01      	subs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f9      	bne.n	8001008 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ff87 	bl	8000f2c <LL_ADC_IsInternalRegulatorEnabled>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d10f      	bne.n	8001042 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	2210      	movs	r2, #16
 8001028:	431a      	orrs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001032:	2201      	movs	r2, #1
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800103a:	231f      	movs	r3, #31
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff ff95 	bl	8000f76 <LL_ADC_REG_IsConversionOngoing>
 800104c:	0003      	movs	r3, r0
 800104e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001054:	2210      	movs	r2, #16
 8001056:	4013      	ands	r3, r2
 8001058:	d000      	beq.n	800105c <HAL_ADC_Init+0xc4>
 800105a:	e122      	b.n	80012a2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d000      	beq.n	8001064 <HAL_ADC_Init+0xcc>
 8001062:	e11e      	b.n	80012a2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001068:	4a98      	ldr	r2, [pc, #608]	@ (80012cc <HAL_ADC_Init+0x334>)
 800106a:	4013      	ands	r3, r2
 800106c:	2202      	movs	r2, #2
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff ff6b 	bl	8000f54 <LL_ADC_IsEnabled>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d000      	beq.n	8001084 <HAL_ADC_Init+0xec>
 8001082:	e0ad      	b.n	80011e0 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7e1b      	ldrb	r3, [r3, #24]
 800108c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800108e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7e5b      	ldrb	r3, [r3, #25]
 8001094:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001096:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7e9b      	ldrb	r3, [r3, #26]
 800109c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800109e:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_ADC_Init+0x116>
 80010a8:	2380      	movs	r3, #128	@ 0x80
 80010aa:	015b      	lsls	r3, r3, #5
 80010ac:	e000      	b.n	80010b0 <HAL_ADC_Init+0x118>
 80010ae:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010b0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010b6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	da04      	bge.n	80010ca <HAL_ADC_Init+0x132>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	085b      	lsrs	r3, r3, #1
 80010c8:	e001      	b.n	80010ce <HAL_ADC_Init+0x136>
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80010ce:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	212c      	movs	r1, #44	@ 0x2c
 80010d4:	5c5b      	ldrb	r3, [r3, r1]
 80010d6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010d8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2220      	movs	r2, #32
 80010e4:	5c9b      	ldrb	r3, [r3, r2]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d115      	bne.n	8001116 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7e9b      	ldrb	r3, [r3, #26]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2280      	movs	r2, #128	@ 0x80
 80010f6:	0252      	lsls	r2, r2, #9
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	e00b      	b.n	8001116 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001102:	2220      	movs	r2, #32
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800110e:	2201      	movs	r2, #1
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00a      	beq.n	8001134 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001122:	23e0      	movs	r3, #224	@ 0xe0
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800112c:	4313      	orrs	r3, r2
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	4a65      	ldr	r2, [pc, #404]	@ (80012d0 <HAL_ADC_Init+0x338>)
 800113c:	4013      	ands	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	430a      	orrs	r2, r1
 8001148:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	0f9b      	lsrs	r3, r3, #30
 8001150:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001156:	4313      	orrs	r3, r2
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	4313      	orrs	r3, r2
 800115c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	223c      	movs	r2, #60	@ 0x3c
 8001162:	5c9b      	ldrb	r3, [r3, r2]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d111      	bne.n	800118c <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	0f9b      	lsrs	r3, r3, #30
 800116e:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001174:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800117a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001180:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	4313      	orrs	r3, r2
 8001186:	2201      	movs	r2, #1
 8001188:	4313      	orrs	r3, r2
 800118a:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	4a50      	ldr	r2, [pc, #320]	@ (80012d4 <HAL_ADC_Init+0x33c>)
 8001194:	4013      	ands	r3, r2
 8001196:	0019      	movs	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	430a      	orrs	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	23c0      	movs	r3, #192	@ 0xc0
 80011a8:	061b      	lsls	r3, r3, #24
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d018      	beq.n	80011e0 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	05db      	lsls	r3, r3, #23
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d012      	beq.n	80011e0 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011be:	2380      	movs	r3, #128	@ 0x80
 80011c0:	061b      	lsls	r3, r3, #24
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d00c      	beq.n	80011e0 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80011c6:	4b44      	ldr	r3, [pc, #272]	@ (80012d8 <HAL_ADC_Init+0x340>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a44      	ldr	r2, [pc, #272]	@ (80012dc <HAL_ADC_Init+0x344>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	0019      	movs	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	23f0      	movs	r3, #240	@ 0xf0
 80011d6:	039b      	lsls	r3, r3, #14
 80011d8:	401a      	ands	r2, r3
 80011da:	4b3f      	ldr	r3, [pc, #252]	@ (80012d8 <HAL_ADC_Init+0x340>)
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e8:	001a      	movs	r2, r3
 80011ea:	2100      	movs	r1, #0
 80011ec:	f7ff fdf7 	bl	8000dde <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f8:	4939      	ldr	r1, [pc, #228]	@ (80012e0 <HAL_ADC_Init+0x348>)
 80011fa:	001a      	movs	r2, r3
 80011fc:	f7ff fdef 	bl	8000dde <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d109      	bne.n	800121c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2110      	movs	r1, #16
 8001214:	4249      	negs	r1, r1
 8001216:	430a      	orrs	r2, r1
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28
 800121a:	e018      	b.n	800124e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	039b      	lsls	r3, r3, #14
 8001224:	429a      	cmp	r2, r3
 8001226:	d112      	bne.n	800124e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	3b01      	subs	r3, #1
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	221c      	movs	r2, #28
 8001238:	4013      	ands	r3, r2
 800123a:	2210      	movs	r2, #16
 800123c:	4252      	negs	r2, r2
 800123e:	409a      	lsls	r2, r3
 8001240:	0011      	movs	r1, r2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2100      	movs	r1, #0
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff fddf 	bl	8000e18 <LL_ADC_GetSamplingTimeCommonChannels>
 800125a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001260:	429a      	cmp	r2, r3
 8001262:	d10b      	bne.n	800127c <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126e:	2203      	movs	r2, #3
 8001270:	4393      	bics	r3, r2
 8001272:	2201      	movs	r2, #1
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800127a:	e01c      	b.n	80012b6 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001280:	2212      	movs	r2, #18
 8001282:	4393      	bics	r3, r2
 8001284:	2210      	movs	r2, #16
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001290:	2201      	movs	r2, #1
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001298:	231f      	movs	r3, #31
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012a0:	e009      	b.n	80012b6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	2210      	movs	r2, #16
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012ae:	231f      	movs	r3, #31
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80012b6:	231f      	movs	r3, #31
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	781b      	ldrb	r3, [r3, #0]
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b008      	add	sp, #32
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000090 	.word	0x20000090
 80012c8:	00030d40 	.word	0x00030d40
 80012cc:	fffffefd 	.word	0xfffffefd
 80012d0:	ffde0201 	.word	0xffde0201
 80012d4:	1ffffc02 	.word	0x1ffffc02
 80012d8:	40012708 	.word	0x40012708
 80012dc:	ffc3ffff 	.word	0xffc3ffff
 80012e0:	7fffff04 	.word	0x7fffff04

080012e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ee:	2317      	movs	r3, #23
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2254      	movs	r2, #84	@ 0x54
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x24>
 8001304:	2302      	movs	r3, #2
 8001306:	e1be      	b.n	8001686 <HAL_ADC_ConfigChannel+0x3a2>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2254      	movs	r2, #84	@ 0x54
 800130c:	2101      	movs	r1, #1
 800130e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	0018      	movs	r0, r3
 8001316:	f7ff fe2e 	bl	8000f76 <LL_ADC_REG_IsConversionOngoing>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d000      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x3c>
 800131e:	e1a1      	b.n	8001664 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d100      	bne.n	800132a <HAL_ADC_ConfigChannel+0x46>
 8001328:	e152      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	429a      	cmp	r2, r3
 8001334:	d004      	beq.n	8001340 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800133a:	4ac2      	ldr	r2, [pc, #776]	@ (8001644 <HAL_ADC_ConfigChannel+0x360>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d108      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	0019      	movs	r1, r3
 800134a:	0010      	movs	r0, r2
 800134c:	f7ff fd9b 	bl	8000e86 <LL_ADC_REG_SetSequencerChAdd>
 8001350:	e0ed      	b.n	800152e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	211f      	movs	r1, #31
 800135c:	400b      	ands	r3, r1
 800135e:	210f      	movs	r1, #15
 8001360:	4099      	lsls	r1, r3
 8001362:	000b      	movs	r3, r1
 8001364:	43db      	mvns	r3, r3
 8001366:	4013      	ands	r3, r2
 8001368:	0019      	movs	r1, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	0a5b      	lsrs	r3, r3, #9
 8001372:	d105      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x9c>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	0e9b      	lsrs	r3, r3, #26
 800137a:	221f      	movs	r2, #31
 800137c:	4013      	ands	r3, r2
 800137e:	e0bc      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	d000      	beq.n	800138c <HAL_ADC_ConfigChannel+0xa8>
 800138a:	e0b5      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x214>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2202      	movs	r2, #2
 8001392:	4013      	ands	r3, r2
 8001394:	d000      	beq.n	8001398 <HAL_ADC_ConfigChannel+0xb4>
 8001396:	e0ad      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x210>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2204      	movs	r2, #4
 800139e:	4013      	ands	r3, r2
 80013a0:	d000      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0xc0>
 80013a2:	e0a5      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x20c>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2208      	movs	r2, #8
 80013aa:	4013      	ands	r3, r2
 80013ac:	d000      	beq.n	80013b0 <HAL_ADC_ConfigChannel+0xcc>
 80013ae:	e09d      	b.n	80014ec <HAL_ADC_ConfigChannel+0x208>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2210      	movs	r2, #16
 80013b6:	4013      	ands	r3, r2
 80013b8:	d000      	beq.n	80013bc <HAL_ADC_ConfigChannel+0xd8>
 80013ba:	e095      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x204>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2220      	movs	r2, #32
 80013c2:	4013      	ands	r3, r2
 80013c4:	d000      	beq.n	80013c8 <HAL_ADC_ConfigChannel+0xe4>
 80013c6:	e08d      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x200>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2240      	movs	r2, #64	@ 0x40
 80013ce:	4013      	ands	r3, r2
 80013d0:	d000      	beq.n	80013d4 <HAL_ADC_ConfigChannel+0xf0>
 80013d2:	e085      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x1fc>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	4013      	ands	r3, r2
 80013dc:	d000      	beq.n	80013e0 <HAL_ADC_ConfigChannel+0xfc>
 80013de:	e07d      	b.n	80014dc <HAL_ADC_ConfigChannel+0x1f8>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4013      	ands	r3, r2
 80013ea:	d000      	beq.n	80013ee <HAL_ADC_ConfigChannel+0x10a>
 80013ec:	e074      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x1f4>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	2380      	movs	r3, #128	@ 0x80
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4013      	ands	r3, r2
 80013f8:	d000      	beq.n	80013fc <HAL_ADC_ConfigChannel+0x118>
 80013fa:	e06b      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x1f0>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4013      	ands	r3, r2
 8001406:	d000      	beq.n	800140a <HAL_ADC_ConfigChannel+0x126>
 8001408:	e062      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x1ec>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	4013      	ands	r3, r2
 8001414:	d000      	beq.n	8001418 <HAL_ADC_ConfigChannel+0x134>
 8001416:	e059      	b.n	80014cc <HAL_ADC_ConfigChannel+0x1e8>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	015b      	lsls	r3, r3, #5
 8001420:	4013      	ands	r3, r2
 8001422:	d151      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1e4>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	019b      	lsls	r3, r3, #6
 800142c:	4013      	ands	r3, r2
 800142e:	d149      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1e0>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	01db      	lsls	r3, r3, #7
 8001438:	4013      	ands	r3, r2
 800143a:	d141      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x1dc>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	4013      	ands	r3, r2
 8001446:	d139      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1d8>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	025b      	lsls	r3, r3, #9
 8001450:	4013      	ands	r3, r2
 8001452:	d131      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1d4>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2380      	movs	r3, #128	@ 0x80
 800145a:	029b      	lsls	r3, r3, #10
 800145c:	4013      	ands	r3, r2
 800145e:	d129      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x1d0>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	02db      	lsls	r3, r3, #11
 8001468:	4013      	ands	r3, r2
 800146a:	d121      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x1cc>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	031b      	lsls	r3, r3, #12
 8001474:	4013      	ands	r3, r2
 8001476:	d119      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1c8>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	035b      	lsls	r3, r3, #13
 8001480:	4013      	ands	r3, r2
 8001482:	d111      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x1c4>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	039b      	lsls	r3, r3, #14
 800148c:	4013      	ands	r3, r2
 800148e:	d109      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1c0>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	03db      	lsls	r3, r3, #15
 8001498:	4013      	ands	r3, r2
 800149a:	d001      	beq.n	80014a0 <HAL_ADC_ConfigChannel+0x1bc>
 800149c:	2316      	movs	r3, #22
 800149e:	e02c      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014a0:	2300      	movs	r3, #0
 80014a2:	e02a      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014a4:	2315      	movs	r3, #21
 80014a6:	e028      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014a8:	2314      	movs	r3, #20
 80014aa:	e026      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014ac:	2313      	movs	r3, #19
 80014ae:	e024      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014b0:	2312      	movs	r3, #18
 80014b2:	e022      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014b4:	2311      	movs	r3, #17
 80014b6:	e020      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014b8:	2310      	movs	r3, #16
 80014ba:	e01e      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014bc:	230f      	movs	r3, #15
 80014be:	e01c      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014c0:	230e      	movs	r3, #14
 80014c2:	e01a      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014c4:	230d      	movs	r3, #13
 80014c6:	e018      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014c8:	230c      	movs	r3, #12
 80014ca:	e016      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014cc:	230b      	movs	r3, #11
 80014ce:	e014      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014d0:	230a      	movs	r3, #10
 80014d2:	e012      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014d4:	2309      	movs	r3, #9
 80014d6:	e010      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014d8:	2308      	movs	r3, #8
 80014da:	e00e      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014dc:	2307      	movs	r3, #7
 80014de:	e00c      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014e0:	2306      	movs	r3, #6
 80014e2:	e00a      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014e4:	2305      	movs	r3, #5
 80014e6:	e008      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014e8:	2304      	movs	r3, #4
 80014ea:	e006      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014ec:	2303      	movs	r3, #3
 80014ee:	e004      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_ADC_ConfigChannel+0x216>
 80014f8:	2300      	movs	r3, #0
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	6852      	ldr	r2, [r2, #4]
 80014fe:	201f      	movs	r0, #31
 8001500:	4002      	ands	r2, r0
 8001502:	4093      	lsls	r3, r2
 8001504:	000a      	movs	r2, r1
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	429a      	cmp	r2, r3
 800151a:	d808      	bhi.n	800152e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	001a      	movs	r2, r3
 800152a:	f7ff fc8c 	bl	8000e46 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	6819      	ldr	r1, [r3, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	001a      	movs	r2, r3
 800153c:	f7ff fcc6 	bl	8000ecc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db00      	blt.n	800154a <HAL_ADC_ConfigChannel+0x266>
 8001548:	e096      	b.n	8001678 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800154a:	4b3f      	ldr	r3, [pc, #252]	@ (8001648 <HAL_ADC_ConfigChannel+0x364>)
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fc39 	bl	8000dc4 <LL_ADC_GetCommonPathInternalCh>
 8001552:	0003      	movs	r3, r0
 8001554:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a3c      	ldr	r2, [pc, #240]	@ (800164c <HAL_ADC_ConfigChannel+0x368>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d123      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	2380      	movs	r3, #128	@ 0x80
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001568:	d11e      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	2280      	movs	r2, #128	@ 0x80
 800156e:	0412      	lsls	r2, r2, #16
 8001570:	4313      	orrs	r3, r2
 8001572:	4a35      	ldr	r2, [pc, #212]	@ (8001648 <HAL_ADC_ConfigChannel+0x364>)
 8001574:	0019      	movs	r1, r3
 8001576:	0010      	movs	r0, r2
 8001578:	f7ff fc10 	bl	8000d9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800157c:	4b34      	ldr	r3, [pc, #208]	@ (8001650 <HAL_ADC_ConfigChannel+0x36c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4934      	ldr	r1, [pc, #208]	@ (8001654 <HAL_ADC_ConfigChannel+0x370>)
 8001582:	0018      	movs	r0, r3
 8001584:	f7fe fdc0 	bl	8000108 <__udivsi3>
 8001588:	0003      	movs	r3, r0
 800158a:	001a      	movs	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	189b      	adds	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001598:	e002      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3b01      	subs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015a6:	e067      	b.n	8001678 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001658 <HAL_ADC_ConfigChannel+0x374>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d162      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	03db      	lsls	r3, r3, #15
 80015b8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015ba:	d15d      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2280      	movs	r2, #128	@ 0x80
 80015c0:	03d2      	lsls	r2, r2, #15
 80015c2:	4313      	orrs	r3, r2
 80015c4:	4a20      	ldr	r2, [pc, #128]	@ (8001648 <HAL_ADC_ConfigChannel+0x364>)
 80015c6:	0019      	movs	r1, r3
 80015c8:	0010      	movs	r0, r2
 80015ca:	f7ff fbe7 	bl	8000d9c <LL_ADC_SetCommonPathInternalCh>
 80015ce:	e053      	b.n	8001678 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	061b      	lsls	r3, r3, #24
 80015d8:	429a      	cmp	r2, r3
 80015da:	d004      	beq.n	80015e6 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015e0:	4a18      	ldr	r2, [pc, #96]	@ (8001644 <HAL_ADC_ConfigChannel+0x360>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d107      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	0019      	movs	r1, r3
 80015f0:	0010      	movs	r0, r2
 80015f2:	f7ff fc59 	bl	8000ea8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da3c      	bge.n	8001678 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_ADC_ConfigChannel+0x364>)
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff fbdf 	bl	8000dc4 <LL_ADC_GetCommonPathInternalCh>
 8001606:	0003      	movs	r3, r0
 8001608:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a0f      	ldr	r2, [pc, #60]	@ (800164c <HAL_ADC_ConfigChannel+0x368>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d108      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4a11      	ldr	r2, [pc, #68]	@ (800165c <HAL_ADC_ConfigChannel+0x378>)
 8001618:	4013      	ands	r3, r2
 800161a:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <HAL_ADC_ConfigChannel+0x364>)
 800161c:	0019      	movs	r1, r3
 800161e:	0010      	movs	r0, r2
 8001620:	f7ff fbbc 	bl	8000d9c <LL_ADC_SetCommonPathInternalCh>
 8001624:	e028      	b.n	8001678 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0b      	ldr	r2, [pc, #44]	@ (8001658 <HAL_ADC_ConfigChannel+0x374>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d123      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <HAL_ADC_ConfigChannel+0x37c>)
 8001634:	4013      	ands	r3, r2
 8001636:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_ADC_ConfigChannel+0x364>)
 8001638:	0019      	movs	r1, r3
 800163a:	0010      	movs	r0, r2
 800163c:	f7ff fbae 	bl	8000d9c <LL_ADC_SetCommonPathInternalCh>
 8001640:	e01a      	b.n	8001678 <HAL_ADC_ConfigChannel+0x394>
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	80000004 	.word	0x80000004
 8001648:	40012708 	.word	0x40012708
 800164c:	a4000200 	.word	0xa4000200
 8001650:	20000090 	.word	0x20000090
 8001654:	00030d40 	.word	0x00030d40
 8001658:	a8000400 	.word	0xa8000400
 800165c:	ff7fffff 	.word	0xff7fffff
 8001660:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001668:	2220      	movs	r2, #32
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001670:	2317      	movs	r3, #23
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2254      	movs	r2, #84	@ 0x54
 800167c:	2100      	movs	r1, #0
 800167e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001680:	2317      	movs	r3, #23
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	781b      	ldrb	r3, [r3, #0]
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b006      	add	sp, #24
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	0002      	movs	r2, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80016a4:	d828      	bhi.n	80016f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001764 <__NVIC_SetPriority+0xd4>)
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	33c0      	adds	r3, #192	@ 0xc0
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	589b      	ldr	r3, [r3, r2]
 80016b6:	1dfa      	adds	r2, r7, #7
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	0011      	movs	r1, r2
 80016bc:	2203      	movs	r2, #3
 80016be:	400a      	ands	r2, r1
 80016c0:	00d2      	lsls	r2, r2, #3
 80016c2:	21ff      	movs	r1, #255	@ 0xff
 80016c4:	4091      	lsls	r1, r2
 80016c6:	000a      	movs	r2, r1
 80016c8:	43d2      	mvns	r2, r2
 80016ca:	401a      	ands	r2, r3
 80016cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	22ff      	movs	r2, #255	@ 0xff
 80016d4:	401a      	ands	r2, r3
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	0018      	movs	r0, r3
 80016dc:	2303      	movs	r3, #3
 80016de:	4003      	ands	r3, r0
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e4:	481f      	ldr	r0, [pc, #124]	@ (8001764 <__NVIC_SetPriority+0xd4>)
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	430a      	orrs	r2, r1
 80016f0:	33c0      	adds	r3, #192	@ 0xc0
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016f6:	e031      	b.n	800175c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001768 <__NVIC_SetPriority+0xd8>)
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	0019      	movs	r1, r3
 8001700:	230f      	movs	r3, #15
 8001702:	400b      	ands	r3, r1
 8001704:	3b08      	subs	r3, #8
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3306      	adds	r3, #6
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	18d3      	adds	r3, r2, r3
 800170e:	3304      	adds	r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1dfa      	adds	r2, r7, #7
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	0011      	movs	r1, r2
 8001718:	2203      	movs	r2, #3
 800171a:	400a      	ands	r2, r1
 800171c:	00d2      	lsls	r2, r2, #3
 800171e:	21ff      	movs	r1, #255	@ 0xff
 8001720:	4091      	lsls	r1, r2
 8001722:	000a      	movs	r2, r1
 8001724:	43d2      	mvns	r2, r2
 8001726:	401a      	ands	r2, r3
 8001728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	019b      	lsls	r3, r3, #6
 800172e:	22ff      	movs	r2, #255	@ 0xff
 8001730:	401a      	ands	r2, r3
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	0018      	movs	r0, r3
 8001738:	2303      	movs	r3, #3
 800173a:	4003      	ands	r3, r0
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001740:	4809      	ldr	r0, [pc, #36]	@ (8001768 <__NVIC_SetPriority+0xd8>)
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	001c      	movs	r4, r3
 8001748:	230f      	movs	r3, #15
 800174a:	4023      	ands	r3, r4
 800174c:	3b08      	subs	r3, #8
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	430a      	orrs	r2, r1
 8001752:	3306      	adds	r3, #6
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	18c3      	adds	r3, r0, r3
 8001758:	3304      	adds	r3, #4
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b003      	add	sp, #12
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	045b      	lsls	r3, r3, #17
 800177c:	429a      	cmp	r2, r3
 800177e:	d301      	bcc.n	8001784 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001780:	2301      	movs	r3, #1
 8001782:	e010      	b.n	80017a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <SysTick_Config+0x44>)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	3a01      	subs	r2, #1
 800178a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178c:	2301      	movs	r3, #1
 800178e:	425b      	negs	r3, r3
 8001790:	2103      	movs	r1, #3
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff ff7c 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <SysTick_Config+0x44>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <SysTick_Config+0x44>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	210f      	movs	r1, #15
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	0011      	movs	r1, r2
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b004      	add	sp, #16
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ffbf 	bl	800176c <SysTick_Config>
 80017ee:	0003      	movs	r3, r0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e077      	b.n	80018fa <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a3d      	ldr	r2, [pc, #244]	@ (8001904 <HAL_DMA_Init+0x10c>)
 8001810:	4694      	mov	ip, r2
 8001812:	4463      	add	r3, ip
 8001814:	2114      	movs	r1, #20
 8001816:	0018      	movs	r0, r3
 8001818:	f7fe fc76 	bl	8000108 <__udivsi3>
 800181c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800181e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2225      	movs	r2, #37	@ 0x25
 8001828:	2102      	movs	r1, #2
 800182a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4934      	ldr	r1, [pc, #208]	@ (8001908 <HAL_DMA_Init+0x110>)
 8001838:	400a      	ands	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6819      	ldr	r1, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0018      	movs	r0, r3
 8001876:	f000 f939 	bl	8001aec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	01db      	lsls	r3, r3, #7
 8001882:	429a      	cmp	r2, r3
 8001884:	d102      	bne.n	800188c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001894:	21ff      	movs	r1, #255	@ 0xff
 8001896:	400a      	ands	r2, r1
 8001898:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d011      	beq.n	80018d0 <HAL_DMA_Init+0xd8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d80d      	bhi.n	80018d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 f944 	bl	8001b44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	e008      	b.n	80018e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2225      	movs	r2, #37	@ 0x25
 80018ec:	2101      	movs	r1, #1
 80018ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2224      	movs	r2, #36	@ 0x24
 80018f4:	2100      	movs	r1, #0
 80018f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	bffdfff8 	.word	0xbffdfff8
 8001908:	ffff800f 	.word	0xffff800f

0800190c <HAL_DMA_Start>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191a:	2317      	movs	r3, #23
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2224      	movs	r2, #36	@ 0x24
 8001926:	5c9b      	ldrb	r3, [r3, r2]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_DMA_Start+0x24>
 800192c:	2302      	movs	r3, #2
 800192e:	e036      	b.n	800199e <HAL_DMA_Start+0x92>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2224      	movs	r2, #36	@ 0x24
 8001934:	2101      	movs	r1, #1
 8001936:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2225      	movs	r2, #37	@ 0x25
 800193c:	5c9b      	ldrb	r3, [r3, r2]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d11d      	bne.n	8001980 <HAL_DMA_Start+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2225      	movs	r2, #37	@ 0x25
 8001948:	2102      	movs	r1, #2
 800194a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	438a      	bics	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f87f 	bl	8001a6c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	430a      	orrs	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e007      	b.n	8001990 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2224      	movs	r2, #36	@ 0x24
 8001984:	2100      	movs	r1, #0
 8001986:	5499      	strb	r1, [r3, r2]
    status = HAL_BUSY;
 8001988:	2317      	movs	r3, #23
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	2202      	movs	r2, #2
 800198e:	701a      	strb	r2, [r3, #0]
  }

  /* Process locked */
  __HAL_UNLOCK(hdma);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2224      	movs	r2, #36	@ 0x24
 8001994:	2100      	movs	r1, #0
 8001996:	5499      	strb	r1, [r3, r2]

  return status;
 8001998:	2317      	movs	r3, #23
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	781b      	ldrb	r3, [r3, #0]
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b006      	add	sp, #24
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e050      	b.n	8001a5c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2225      	movs	r2, #37	@ 0x25
 80019be:	5c9b      	ldrb	r3, [r3, r2]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d008      	beq.n	80019d8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2204      	movs	r2, #4
 80019ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	@ 0x24
 80019d0:	2100      	movs	r1, #0
 80019d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e041      	b.n	8001a5c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	210e      	movs	r1, #14
 80019e4:	438a      	bics	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	491c      	ldr	r1, [pc, #112]	@ (8001a64 <HAL_DMA_Abort+0xbc>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	438a      	bics	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_DMA_Abort+0xc0>)
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	221c      	movs	r2, #28
 8001a12:	4013      	ands	r3, r2
 8001a14:	2201      	movs	r2, #1
 8001a16:	409a      	lsls	r2, r3
 8001a18:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <HAL_DMA_Abort+0xc0>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a26:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a3a:	490a      	ldr	r1, [pc, #40]	@ (8001a64 <HAL_DMA_Abort+0xbc>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001a48:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2225      	movs	r2, #37	@ 0x25
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2224      	movs	r2, #36	@ 0x24
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b002      	add	sp, #8
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	fffffeff 	.word	0xfffffeff
 8001a68:	40020000 	.word	0x40020000

08001a6c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001a94:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <DMA_SetConfig+0x7c>)
 8001a98:	6859      	ldr	r1, [r3, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	221c      	movs	r2, #28
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <DMA_SetConfig+0x7c>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	d108      	bne.n	8001ace <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001acc:	e007      	b.n	8001ade <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	60da      	str	r2, [r3, #12]
}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	40020000 	.word	0x40020000

08001aec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	001a      	movs	r2, r3
 8001afa:	23ff      	movs	r3, #255	@ 0xff
 8001afc:	4013      	ands	r3, r2
 8001afe:	3b08      	subs	r3, #8
 8001b00:	2114      	movs	r1, #20
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7fe fb00 	bl	8000108 <__udivsi3>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001b14:	4694      	mov	ip, r2
 8001b16:	4463      	add	r3, ip
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001b24:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	221c      	movs	r2, #28
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001b34:	46c0      	nop			@ (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b004      	add	sp, #16
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	10008200 	.word	0x10008200
 8001b40:	40020880 	.word	0x40020880

08001b44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	22ff      	movs	r2, #255	@ 0xff
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b5a:	4694      	mov	ip, r2
 8001b5c:	4463      	add	r3, ip
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	001a      	movs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a07      	ldr	r2, [pc, #28]	@ (8001b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	4013      	ands	r3, r2
 8001b74:	2201      	movs	r2, #1
 8001b76:	409a      	lsls	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001b7c:	46c0      	nop			@ (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b004      	add	sp, #16
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	1000823f 	.word	0x1000823f
 8001b88:	40020940 	.word	0x40020940

08001b8c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b9a:	e153      	b.n	8001e44 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4091      	lsls	r1, r2
 8001ba6:	000a      	movs	r2, r1
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d100      	bne.n	8001bb4 <HAL_GPIO_Init+0x28>
 8001bb2:	e144      	b.n	8001e3e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x38>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b12      	cmp	r3, #18
 8001bc2:	d125      	bne.n	8001c10 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	58d3      	ldr	r3, [r2, r3]
 8001bd0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	43da      	mvns	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	4013      	ands	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	220f      	movs	r2, #15
 8001bee:	401a      	ands	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2107      	movs	r1, #7
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	0013      	movs	r3, r2
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	08da      	lsrs	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3208      	adds	r2, #8
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	6979      	ldr	r1, [r7, #20]
 8001c0e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	0013      	movs	r3, r2
 8001c20:	43da      	mvns	r2, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	4013      	ands	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	0013      	movs	r3, r2
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d00b      	beq.n	8001c64 <HAL_GPIO_Init+0xd8>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d007      	beq.n	8001c64 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c58:	2b11      	cmp	r3, #17
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b12      	cmp	r3, #18
 8001c62:	d130      	bne.n	8001cc6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	409a      	lsls	r2, r3
 8001c72:	0013      	movs	r3, r2
 8001c74:	43da      	mvns	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	409a      	lsls	r2, r3
 8001c86:	0013      	movs	r3, r2
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	0013      	movs	r3, r2
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d017      	beq.n	8001cfe <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	0013      	movs	r3, r2
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	055b      	lsls	r3, r3, #21
 8001d06:	4013      	ands	r3, r2
 8001d08:	d100      	bne.n	8001d0c <HAL_GPIO_Init+0x180>
 8001d0a:	e098      	b.n	8001e3e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d0c:	4a53      	ldr	r2, [pc, #332]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3318      	adds	r3, #24
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	589b      	ldr	r3, [r3, r2]
 8001d18:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	4013      	ands	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	220f      	movs	r2, #15
 8001d24:	409a      	lsls	r2, r3
 8001d26:	0013      	movs	r3, r2
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	23a0      	movs	r3, #160	@ 0xa0
 8001d34:	05db      	lsls	r3, r3, #23
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d019      	beq.n	8001d6e <HAL_GPIO_Init+0x1e2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a48      	ldr	r2, [pc, #288]	@ (8001e60 <HAL_GPIO_Init+0x2d4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0x1de>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a47      	ldr	r2, [pc, #284]	@ (8001e64 <HAL_GPIO_Init+0x2d8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00d      	beq.n	8001d66 <HAL_GPIO_Init+0x1da>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a46      	ldr	r2, [pc, #280]	@ (8001e68 <HAL_GPIO_Init+0x2dc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <HAL_GPIO_Init+0x1d6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a45      	ldr	r2, [pc, #276]	@ (8001e6c <HAL_GPIO_Init+0x2e0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_GPIO_Init+0x1d2>
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	e008      	b.n	8001d70 <HAL_GPIO_Init+0x1e4>
 8001d5e:	2306      	movs	r3, #6
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x1e4>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e004      	b.n	8001d70 <HAL_GPIO_Init+0x1e4>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_Init+0x1e4>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x1e4>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	2103      	movs	r1, #3
 8001d74:	400a      	ands	r2, r1
 8001d76:	00d2      	lsls	r2, r2, #3
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001d80:	4936      	ldr	r1, [pc, #216]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3318      	adds	r3, #24
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001d8e:	4a33      	ldr	r2, [pc, #204]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001d90:	2380      	movs	r3, #128	@ 0x80
 8001d92:	58d3      	ldr	r3, [r2, r3]
 8001d94:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	4013      	ands	r3, r2
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001db4:	4929      	ldr	r1, [pc, #164]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001db6:	2280      	movs	r2, #128	@ 0x80
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001dbc:	4a27      	ldr	r2, [pc, #156]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001dbe:	2384      	movs	r3, #132	@ 0x84
 8001dc0:	58d3      	ldr	r3, [r2, r3]
 8001dc2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	029b      	lsls	r3, r3, #10
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001de2:	491e      	ldr	r1, [pc, #120]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001de4:	2284      	movs	r2, #132	@ 0x84
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001dea:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43da      	mvns	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4013      	ands	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	035b      	lsls	r3, r3, #13
 8001e02:	4013      	ands	r3, r2
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	4013      	ands	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	039b      	lsls	r3, r3, #14
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	3301      	adds	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	40da      	lsrs	r2, r3
 8001e4c:	1e13      	subs	r3, r2, #0
 8001e4e:	d000      	beq.n	8001e52 <HAL_GPIO_Init+0x2c6>
 8001e50:	e6a4      	b.n	8001b9c <HAL_GPIO_Init+0x10>
  }
}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	46c0      	nop			@ (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b006      	add	sp, #24
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	50000400 	.word	0x50000400
 8001e64:	50000800 	.word	0x50000800
 8001e68:	50000c00 	.word	0x50000c00
 8001e6c:	50001400 	.word	0x50001400

08001e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	0008      	movs	r0, r1
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	1cbb      	adds	r3, r7, #2
 8001e7e:	1c02      	adds	r2, r0, #0
 8001e80:	801a      	strh	r2, [r3, #0]
 8001e82:	1c7b      	adds	r3, r7, #1
 8001e84:	1c0a      	adds	r2, r1, #0
 8001e86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e88:	1c7b      	adds	r3, r7, #1
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e90:	1cbb      	adds	r3, r7, #2
 8001e92:	881a      	ldrh	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e98:	e003      	b.n	8001ea2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e9a:	1cbb      	adds	r3, r7, #2
 8001e9c:	881a      	ldrh	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e1d0      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d100      	bne.n	8001eca <HAL_RCC_OscConfig+0x1e>
 8001ec8:	e069      	b.n	8001f9e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eca:	4bc8      	ldr	r3, [pc, #800]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2238      	movs	r2, #56	@ 0x38
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d15d      	bne.n	8001f9e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e1bc      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	025b      	lsls	r3, r3, #9
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_OscConfig+0x56>
 8001ef2:	4bbe      	ldr	r3, [pc, #760]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4bbd      	ldr	r3, [pc, #756]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001ef8:	2180      	movs	r1, #128	@ 0x80
 8001efa:	0249      	lsls	r1, r1, #9
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e020      	b.n	8001f44 <HAL_RCC_OscConfig+0x98>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	23a0      	movs	r3, #160	@ 0xa0
 8001f08:	02db      	lsls	r3, r3, #11
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d10e      	bne.n	8001f2c <HAL_RCC_OscConfig+0x80>
 8001f0e:	4bb7      	ldr	r3, [pc, #732]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4bb6      	ldr	r3, [pc, #728]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f14:	2180      	movs	r1, #128	@ 0x80
 8001f16:	02c9      	lsls	r1, r1, #11
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	4bb3      	ldr	r3, [pc, #716]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4bb2      	ldr	r3, [pc, #712]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f22:	2180      	movs	r1, #128	@ 0x80
 8001f24:	0249      	lsls	r1, r1, #9
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0x98>
 8001f2c:	4baf      	ldr	r3, [pc, #700]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4bae      	ldr	r3, [pc, #696]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f32:	49af      	ldr	r1, [pc, #700]	@ (80021f0 <HAL_RCC_OscConfig+0x344>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	4bac      	ldr	r3, [pc, #688]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4bab      	ldr	r3, [pc, #684]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f3e:	49ad      	ldr	r1, [pc, #692]	@ (80021f4 <HAL_RCC_OscConfig+0x348>)
 8001f40:	400a      	ands	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d014      	beq.n	8001f76 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fef8 	bl	8000d40 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f56:	f7fe fef3 	bl	8000d40 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b64      	cmp	r3, #100	@ 0x64
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e17b      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f68:	4ba0      	ldr	r3, [pc, #640]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	029b      	lsls	r3, r3, #10
 8001f70:	4013      	ands	r3, r2
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0xaa>
 8001f74:	e013      	b.n	8001f9e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7fe fee3 	bl	8000d40 <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f80:	f7fe fede 	bl	8000d40 <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	@ 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e166      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f92:	4b96      	ldr	r3, [pc, #600]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	029b      	lsls	r3, r3, #10
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d100      	bne.n	8001faa <HAL_RCC_OscConfig+0xfe>
 8001fa8:	e086      	b.n	80020b8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001faa:	4b90      	ldr	r3, [pc, #576]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2238      	movs	r2, #56	@ 0x38
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d12f      	bne.n	800201a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e14c      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a8b      	ldr	r2, [pc, #556]	@ (80021f8 <HAL_RCC_OscConfig+0x34c>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	021a      	lsls	r2, r3, #8
 8001fd6:	4b85      	ldr	r3, [pc, #532]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d112      	bne.n	8002008 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fe2:	4b82      	ldr	r3, [pc, #520]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a85      	ldr	r2, [pc, #532]	@ (80021fc <HAL_RCC_OscConfig+0x350>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ff6:	4b7d      	ldr	r3, [pc, #500]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0adb      	lsrs	r3, r3, #11
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	4013      	ands	r3, r2
 8002000:	4a7f      	ldr	r2, [pc, #508]	@ (8002200 <HAL_RCC_OscConfig+0x354>)
 8002002:	40da      	lsrs	r2, r3
 8002004:	4b7f      	ldr	r3, [pc, #508]	@ (8002204 <HAL_RCC_OscConfig+0x358>)
 8002006:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002008:	4b7f      	ldr	r3, [pc, #508]	@ (8002208 <HAL_RCC_OscConfig+0x35c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0018      	movs	r0, r3
 800200e:	f7fe fe3b 	bl	8000c88 <HAL_InitTick>
 8002012:	1e03      	subs	r3, r0, #0
 8002014:	d050      	beq.n	80020b8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e122      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d030      	beq.n	8002084 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002022:	4b72      	ldr	r3, [pc, #456]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a75      	ldr	r2, [pc, #468]	@ (80021fc <HAL_RCC_OscConfig+0x350>)
 8002028:	4013      	ands	r3, r2
 800202a:	0019      	movs	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	4b6e      	ldr	r3, [pc, #440]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002036:	4b6d      	ldr	r3, [pc, #436]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b6c      	ldr	r3, [pc, #432]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 800203c:	2180      	movs	r1, #128	@ 0x80
 800203e:	0049      	lsls	r1, r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fe7c 	bl	8000d40 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800204e:	f7fe fe77 	bl	8000d40 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0ff      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002060:	4b62      	ldr	r3, [pc, #392]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4013      	ands	r3, r2
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b5f      	ldr	r3, [pc, #380]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a61      	ldr	r2, [pc, #388]	@ (80021f8 <HAL_RCC_OscConfig+0x34c>)
 8002072:	4013      	ands	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	021a      	lsls	r2, r3, #8
 800207c:	4b5b      	ldr	r3, [pc, #364]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	e019      	b.n	80020b8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002084:	4b59      	ldr	r3, [pc, #356]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b58      	ldr	r3, [pc, #352]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 800208a:	4960      	ldr	r1, [pc, #384]	@ (800220c <HAL_RCC_OscConfig+0x360>)
 800208c:	400a      	ands	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe fe56 	bl	8000d40 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800209a:	f7fe fe51 	bl	8000d40 <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0d9      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ac:	4b4f      	ldr	r3, [pc, #316]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	@ 0x80
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4013      	ands	r3, r2
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2208      	movs	r2, #8
 80020be:	4013      	ands	r3, r2
 80020c0:	d042      	beq.n	8002148 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80020c2:	4b4a      	ldr	r3, [pc, #296]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2238      	movs	r2, #56	@ 0x38
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b18      	cmp	r3, #24
 80020cc:	d105      	bne.n	80020da <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d138      	bne.n	8002148 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0c2      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d019      	beq.n	8002116 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020e2:	4b42      	ldr	r3, [pc, #264]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 80020e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020e6:	4b41      	ldr	r3, [pc, #260]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe fe27 	bl	8000d40 <HAL_GetTick>
 80020f2:	0003      	movs	r3, r0
 80020f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80020f8:	f7fe fe22 	bl	8000d40 <HAL_GetTick>
 80020fc:	0002      	movs	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0aa      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800210a:	4b38      	ldr	r3, [pc, #224]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 800210c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210e:	2202      	movs	r2, #2
 8002110:	4013      	ands	r3, r2
 8002112:	d0f1      	beq.n	80020f8 <HAL_RCC_OscConfig+0x24c>
 8002114:	e018      	b.n	8002148 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002116:	4b35      	ldr	r3, [pc, #212]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8002118:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800211a:	4b34      	ldr	r3, [pc, #208]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 800211c:	2101      	movs	r1, #1
 800211e:	438a      	bics	r2, r1
 8002120:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7fe fe0d 	bl	8000d40 <HAL_GetTick>
 8002126:	0003      	movs	r3, r0
 8002128:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800212c:	f7fe fe08 	bl	8000d40 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e090      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800213e:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d1f1      	bne.n	800212c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	4013      	ands	r3, r2
 8002150:	d100      	bne.n	8002154 <HAL_RCC_OscConfig+0x2a8>
 8002152:	e084      	b.n	800225e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002154:	230f      	movs	r3, #15
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2238      	movs	r2, #56	@ 0x38
 8002162:	4013      	ands	r3, r2
 8002164:	2b20      	cmp	r3, #32
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d000      	beq.n	8002172 <HAL_RCC_OscConfig+0x2c6>
 8002170:	e075      	b.n	800225e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e074      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x2e0>
 800217e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8002180:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002182:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8002184:	2101      	movs	r1, #1
 8002186:	430a      	orrs	r2, r1
 8002188:	65da      	str	r2, [r3, #92]	@ 0x5c
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x31a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x302>
 8002194:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8002196:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 800219a:	2104      	movs	r1, #4
 800219c:	430a      	orrs	r2, r1
 800219e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 80021a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	430a      	orrs	r2, r1
 80021aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x31a>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 80021b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	438a      	bics	r2, r1
 80021b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021ba:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 80021bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021be:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 80021c0:	2104      	movs	r1, #4
 80021c2:	438a      	bics	r2, r1
 80021c4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d028      	beq.n	8002220 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7fe fdb7 	bl	8000d40 <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe fdb2 	bl	8000d40 <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <HAL_RCC_OscConfig+0x364>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d915      	bls.n	8002214 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e039      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
 80021ec:	40021000 	.word	0x40021000
 80021f0:	fffeffff 	.word	0xfffeffff
 80021f4:	fffbffff 	.word	0xfffbffff
 80021f8:	ffff80ff 	.word	0xffff80ff
 80021fc:	ffffc7ff 	.word	0xffffc7ff
 8002200:	02dc6c00 	.word	0x02dc6c00
 8002204:	20000090 	.word	0x20000090
 8002208:	20000094 	.word	0x20000094
 800220c:	fffffeff 	.word	0xfffffeff
 8002210:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002214:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <HAL_RCC_OscConfig+0x3bc>)
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	2202      	movs	r2, #2
 800221a:	4013      	ands	r3, r2
 800221c:	d0dc      	beq.n	80021d8 <HAL_RCC_OscConfig+0x32c>
 800221e:	e013      	b.n	8002248 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe fd8e 	bl	8000d40 <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002228:	e009      	b.n	800223e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7fe fd89 	bl	8000d40 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <HAL_RCC_OscConfig+0x3c0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e010      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800223e:	4b0a      	ldr	r3, [pc, #40]	@ (8002268 <HAL_RCC_OscConfig+0x3bc>)
 8002240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002242:	2202      	movs	r2, #2
 8002244:	4013      	ands	r3, r2
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002248:	230f      	movs	r3, #15
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_RCC_OscConfig+0x3bc>)
 8002254:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002256:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <HAL_RCC_OscConfig+0x3bc>)
 8002258:	4905      	ldr	r1, [pc, #20]	@ (8002270 <HAL_RCC_OscConfig+0x3c4>)
 800225a:	400a      	ands	r2, r1
 800225c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b006      	add	sp, #24
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	00001388 	.word	0x00001388
 8002270:	efffffff 	.word	0xefffffff

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0df      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b71      	ldr	r3, [pc, #452]	@ (8002450 <HAL_RCC_ClockConfig+0x1dc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2207      	movs	r2, #7
 800228e:	4013      	ands	r3, r2
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d91e      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b6e      	ldr	r3, [pc, #440]	@ (8002450 <HAL_RCC_ClockConfig+0x1dc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2207      	movs	r2, #7
 800229c:	4393      	bics	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002450 <HAL_RCC_ClockConfig+0x1dc>)
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022a8:	f7fe fd4a 	bl	8000d40 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022b0:	e009      	b.n	80022c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80022b2:	f7fe fd45 	bl	8000d40 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	4a65      	ldr	r2, [pc, #404]	@ (8002454 <HAL_RCC_ClockConfig+0x1e0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e0c0      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022c6:	4b62      	ldr	r3, [pc, #392]	@ (8002450 <HAL_RCC_ClockConfig+0x1dc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2207      	movs	r2, #7
 80022cc:	4013      	ands	r3, r2
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1ee      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2202      	movs	r2, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	d017      	beq.n	800230e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2204      	movs	r2, #4
 80022e4:	4013      	ands	r3, r2
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a5b      	ldr	r2, [pc, #364]	@ (800245c <HAL_RCC_ClockConfig+0x1e8>)
 80022ee:	401a      	ands	r2, r3
 80022f0:	4b59      	ldr	r3, [pc, #356]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 80022f2:	21b0      	movs	r1, #176	@ 0xb0
 80022f4:	0109      	lsls	r1, r1, #4
 80022f6:	430a      	orrs	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fa:	4b57      	ldr	r3, [pc, #348]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4a58      	ldr	r2, [pc, #352]	@ (8002460 <HAL_RCC_ClockConfig+0x1ec>)
 8002300:	4013      	ands	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4b53      	ldr	r3, [pc, #332]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 800230a:	430a      	orrs	r2, r1
 800230c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2201      	movs	r2, #1
 8002314:	4013      	ands	r3, r2
 8002316:	d04b      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d107      	bne.n	8002330 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002320:	4b4d      	ldr	r3, [pc, #308]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	029b      	lsls	r3, r3, #10
 8002328:	4013      	ands	r3, r2
 800232a:	d11f      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e08b      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002338:	4b47      	ldr	r3, [pc, #284]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4013      	ands	r3, r2
 8002342:	d113      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e07f      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d106      	bne.n	800235e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002350:	4b41      	ldr	r3, [pc, #260]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 8002352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d108      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e074      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800235e:	4b3e      	ldr	r3, [pc, #248]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	2202      	movs	r2, #2
 8002364:	4013      	ands	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e06d      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800236c:	4b3a      	ldr	r3, [pc, #232]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2207      	movs	r2, #7
 8002372:	4393      	bics	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4b37      	ldr	r3, [pc, #220]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 800237c:	430a      	orrs	r2, r1
 800237e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002380:	f7fe fcde 	bl	8000d40 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002388:	e009      	b.n	800239e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800238a:	f7fe fcd9 	bl	8000d40 <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	4a2f      	ldr	r2, [pc, #188]	@ (8002454 <HAL_RCC_ClockConfig+0x1e0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e054      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2e      	ldr	r3, [pc, #184]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2238      	movs	r2, #56	@ 0x38
 80023a4:	401a      	ands	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1ec      	bne.n	800238a <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <HAL_RCC_ClockConfig+0x1dc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2207      	movs	r2, #7
 80023b6:	4013      	ands	r3, r2
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d21e      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCC_ClockConfig+0x1dc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2207      	movs	r2, #7
 80023c4:	4393      	bics	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <HAL_RCC_ClockConfig+0x1dc>)
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fcb6 	bl	8000d40 <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023d8:	e009      	b.n	80023ee <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80023da:	f7fe fcb1 	bl	8000d40 <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002454 <HAL_RCC_ClockConfig+0x1e0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e02c      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023ee:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <HAL_RCC_ClockConfig+0x1dc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2207      	movs	r2, #7
 80023f4:	4013      	ands	r3, r2
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d1ee      	bne.n	80023da <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2204      	movs	r2, #4
 8002402:	4013      	ands	r3, r2
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002406:	4b14      	ldr	r3, [pc, #80]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4a16      	ldr	r2, [pc, #88]	@ (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800241a:	f000 f82b 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 800241e:	0001      	movs	r1, r0
 8002420:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <HAL_RCC_ClockConfig+0x1e4>)
 8002422:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	220f      	movs	r2, #15
 8002428:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800242a:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <HAL_RCC_ClockConfig+0x1f4>)
 800242c:	0092      	lsls	r2, r2, #2
 800242e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002430:	221f      	movs	r2, #31
 8002432:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002434:	000a      	movs	r2, r1
 8002436:	40da      	lsrs	r2, r3
 8002438:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <HAL_RCC_ClockConfig+0x1f8>)
 800243a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <HAL_RCC_ClockConfig+0x1fc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0018      	movs	r0, r3
 8002442:	f7fe fc21 	bl	8000c88 <HAL_InitTick>
 8002446:	0003      	movs	r3, r0
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b004      	add	sp, #16
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40022000 	.word	0x40022000
 8002454:	00001388 	.word	0x00001388
 8002458:	40021000 	.word	0x40021000
 800245c:	ffff84ff 	.word	0xffff84ff
 8002460:	fffff0ff 	.word	0xfffff0ff
 8002464:	ffff8fff 	.word	0xffff8fff
 8002468:	080032f0 	.word	0x080032f0
 800246c:	20000090 	.word	0x20000090
 8002470:	20000094 	.word	0x20000094

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800247a:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x78>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2238      	movs	r2, #56	@ 0x38
 8002480:	4013      	ands	r3, r2
 8002482:	d10f      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x78>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0adb      	lsrs	r3, r3, #11
 800248a:	2207      	movs	r2, #7
 800248c:	4013      	ands	r3, r2
 800248e:	2201      	movs	r2, #1
 8002490:	409a      	lsls	r2, r3
 8002492:	0013      	movs	r3, r2
 8002494:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002496:	6839      	ldr	r1, [r7, #0]
 8002498:	4815      	ldr	r0, [pc, #84]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800249a:	f7fd fe35 	bl	8000108 <__udivsi3>
 800249e:	0003      	movs	r3, r0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	e01e      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x78>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2238      	movs	r2, #56	@ 0x38
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d102      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x80>)
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	e015      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x78>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2238      	movs	r2, #56	@ 0x38
 80024bc:	4013      	ands	r3, r2
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d103      	bne.n	80024ca <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	e00b      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x78>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2238      	movs	r2, #56	@ 0x38
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b18      	cmp	r3, #24
 80024d4:	d103      	bne.n	80024de <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024d6:	23fa      	movs	r3, #250	@ 0xfa
 80024d8:	01db      	lsls	r3, r3, #7
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	e001      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80024e2:	687b      	ldr	r3, [r7, #4]
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	02dc6c00 	.word	0x02dc6c00
 80024f4:	007a1200 	.word	0x007a1200

080024f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80024fc:	f7ff ffba 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002500:	0001      	movs	r1, r0
 8002502:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <HAL_RCC_GetHCLKFreq+0x30>)
 8002504:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	220f      	movs	r2, #15
 800250a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800250c:	4b07      	ldr	r3, [pc, #28]	@ (800252c <HAL_RCC_GetHCLKFreq+0x34>)
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002512:	221f      	movs	r2, #31
 8002514:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002516:	000a      	movs	r2, r1
 8002518:	40da      	lsrs	r2, r3
 800251a:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_RCC_GetHCLKFreq+0x38>)
 800251c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800251e:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <HAL_RCC_GetHCLKFreq+0x38>)
 8002520:	681b      	ldr	r3, [r3, #0]
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	080032f0 	.word	0x080032f0
 8002530:	20000090 	.word	0x20000090

08002534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002538:	f7ff ffde 	bl	80024f8 <HAL_RCC_GetHCLKFreq>
 800253c:	0001      	movs	r1, r0
 800253e:	4b07      	ldr	r3, [pc, #28]	@ (800255c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	0b1b      	lsrs	r3, r3, #12
 8002544:	2207      	movs	r2, #7
 8002546:	401a      	ands	r2, r3
 8002548:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	58d3      	ldr	r3, [r2, r3]
 800254e:	221f      	movs	r2, #31
 8002550:	4013      	ands	r3, r2
 8002552:	40d9      	lsrs	r1, r3
 8002554:	000b      	movs	r3, r1
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	08003330 	.word	0x08003330

08002564 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800256c:	2313      	movs	r3, #19
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002574:	2312      	movs	r3, #18
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2240      	movs	r2, #64	@ 0x40
 8002582:	4013      	ands	r3, r2
 8002584:	d100      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002586:	e079      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002588:	2011      	movs	r0, #17
 800258a:	183b      	adds	r3, r7, r0
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002590:	4b63      	ldr	r3, [pc, #396]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002592:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002594:	2380      	movs	r3, #128	@ 0x80
 8002596:	055b      	lsls	r3, r3, #21
 8002598:	4013      	ands	r3, r2
 800259a:	d110      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b60      	ldr	r3, [pc, #384]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800259e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025a2:	2180      	movs	r1, #128	@ 0x80
 80025a4:	0549      	lsls	r1, r1, #21
 80025a6:	430a      	orrs	r2, r1
 80025a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	055b      	lsls	r3, r3, #21
 80025b2:	4013      	ands	r3, r2
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b8:	183b      	adds	r3, r7, r0
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80025be:	4b58      	ldr	r3, [pc, #352]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025c2:	23c0      	movs	r3, #192	@ 0xc0
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4013      	ands	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d019      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d014      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80025da:	4b51      	ldr	r3, [pc, #324]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025de:	4a51      	ldr	r2, [pc, #324]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025ea:	2180      	movs	r1, #128	@ 0x80
 80025ec:	0249      	lsls	r1, r1, #9
 80025ee:	430a      	orrs	r2, r1
 80025f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025f8:	494b      	ldr	r1, [pc, #300]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025fa:	400a      	ands	r2, r1
 80025fc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80025fe:	4b48      	ldr	r3, [pc, #288]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	d016      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fb98 	bl	8000d40 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002614:	e00c      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe fb93 	bl	8000d40 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	4a42      	ldr	r2, [pc, #264]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d904      	bls.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002626:	2313      	movs	r3, #19
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2203      	movs	r2, #3
 800262c:	701a      	strb	r2, [r3, #0]
          break;
 800262e:	e004      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002630:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	2202      	movs	r2, #2
 8002636:	4013      	ands	r3, r2
 8002638:	d0ed      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800263a:	2313      	movs	r3, #19
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002644:	4b36      	ldr	r3, [pc, #216]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	4a36      	ldr	r2, [pc, #216]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800264a:	4013      	ands	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	4b33      	ldr	r3, [pc, #204]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002654:	430a      	orrs	r2, r1
 8002656:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002658:	e005      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265a:	2312      	movs	r3, #18
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2213      	movs	r2, #19
 8002660:	18ba      	adds	r2, r7, r2
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002666:	2311      	movs	r3, #17
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002670:	4b2b      	ldr	r3, [pc, #172]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002674:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002676:	492e      	ldr	r1, [pc, #184]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002678:	400a      	ands	r2, r1
 800267a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2201      	movs	r2, #1
 8002682:	4013      	ands	r3, r2
 8002684:	d009      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002686:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268a:	2203      	movs	r2, #3
 800268c:	4393      	bics	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b22      	ldr	r3, [pc, #136]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002696:	430a      	orrs	r2, r1
 8002698:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d009      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a8:	4a22      	ldr	r2, [pc, #136]	@ (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026b4:	430a      	orrs	r2, r1
 80026b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2220      	movs	r2, #32
 80026be:	4013      	ands	r3, r2
 80026c0:	d008      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026c2:	4b17      	ldr	r3, [pc, #92]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	0899      	lsrs	r1, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2204      	movs	r2, #4
 80026da:	4013      	ands	r3, r2
 80026dc:	d009      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e2:	4a15      	ldr	r2, [pc, #84]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026ee:	430a      	orrs	r2, r1
 80026f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2280      	movs	r2, #128	@ 0x80
 80026f8:	4013      	ands	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	22e0      	movs	r2, #224	@ 0xe0
 8002702:	4393      	bics	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002710:	2312      	movs	r3, #18
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	781b      	ldrb	r3, [r3, #0]
}
 8002716:	0018      	movs	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	b006      	add	sp, #24
 800271c:	bd80      	pop	{r7, pc}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	40021000 	.word	0x40021000
 8002724:	fffffcff 	.word	0xfffffcff
 8002728:	fffeffff 	.word	0xfffeffff
 800272c:	00001388 	.word	0x00001388
 8002730:	efffffff 	.word	0xefffffff
 8002734:	ffffcfff 	.word	0xffffcfff
 8002738:	ffff3fff 	.word	0xffff3fff

0800273c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e046      	b.n	80027dc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2288      	movs	r2, #136	@ 0x88
 8002752:	589b      	ldr	r3, [r3, r2]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2284      	movs	r2, #132	@ 0x84
 800275c:	2100      	movs	r1, #0
 800275e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0018      	movs	r0, r3
 8002764:	f7fe f9c8 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2288      	movs	r2, #136	@ 0x88
 800276c:	2124      	movs	r1, #36	@ 0x24
 800276e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2101      	movs	r1, #1
 800277c:	438a      	bics	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	0018      	movs	r0, r3
 800278c:	f000 f9aa 	bl	8002ae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f000 f828 	bl	80027e8 <UART_SetConfig>
 8002798:	0003      	movs	r3, r0
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e01c      	b.n	80027dc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	490d      	ldr	r1, [pc, #52]	@ (80027e4 <HAL_UART_Init+0xa8>)
 80027ae:	400a      	ands	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	212a      	movs	r1, #42	@ 0x2a
 80027be:	438a      	bics	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	430a      	orrs	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 fa39 	bl	8002c4c <UART_CheckIdleState>
 80027da:	0003      	movs	r3, r0
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	ffffb7ff 	.word	0xffffb7ff

080027e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f0:	231e      	movs	r3, #30
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4aab      	ldr	r2, [pc, #684]	@ (8002ac4 <UART_SetConfig+0x2dc>)
 8002818:	4013      	ands	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4aa6      	ldr	r2, [pc, #664]	@ (8002ac8 <UART_SetConfig+0x2e0>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a9d      	ldr	r2, [pc, #628]	@ (8002acc <UART_SetConfig+0x2e4>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286a:	220f      	movs	r2, #15
 800286c:	4393      	bics	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a93      	ldr	r2, [pc, #588]	@ (8002ad0 <UART_SetConfig+0x2e8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d127      	bne.n	80028d6 <UART_SetConfig+0xee>
 8002886:	4b93      	ldr	r3, [pc, #588]	@ (8002ad4 <UART_SetConfig+0x2ec>)
 8002888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288a:	2203      	movs	r2, #3
 800288c:	4013      	ands	r3, r2
 800288e:	2b03      	cmp	r3, #3
 8002890:	d017      	beq.n	80028c2 <UART_SetConfig+0xda>
 8002892:	d81b      	bhi.n	80028cc <UART_SetConfig+0xe4>
 8002894:	2b02      	cmp	r3, #2
 8002896:	d00a      	beq.n	80028ae <UART_SetConfig+0xc6>
 8002898:	d818      	bhi.n	80028cc <UART_SetConfig+0xe4>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <UART_SetConfig+0xbc>
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d00a      	beq.n	80028b8 <UART_SetConfig+0xd0>
 80028a2:	e013      	b.n	80028cc <UART_SetConfig+0xe4>
 80028a4:	231f      	movs	r3, #31
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e021      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028ae:	231f      	movs	r3, #31
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	2202      	movs	r2, #2
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	e01c      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028b8:	231f      	movs	r3, #31
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	2204      	movs	r2, #4
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e017      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028c2:	231f      	movs	r3, #31
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2208      	movs	r2, #8
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e012      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028cc:	231f      	movs	r3, #31
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2210      	movs	r2, #16
 80028d2:	701a      	strb	r2, [r3, #0]
 80028d4:	e00d      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7f      	ldr	r2, [pc, #508]	@ (8002ad8 <UART_SetConfig+0x2f0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d104      	bne.n	80028ea <UART_SetConfig+0x102>
 80028e0:	231f      	movs	r3, #31
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e003      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028ea:	231f      	movs	r3, #31
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2210      	movs	r2, #16
 80028f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d000      	beq.n	8002900 <UART_SetConfig+0x118>
 80028fe:	e06f      	b.n	80029e0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002900:	231f      	movs	r3, #31
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d01f      	beq.n	800294a <UART_SetConfig+0x162>
 800290a:	dc22      	bgt.n	8002952 <UART_SetConfig+0x16a>
 800290c:	2b04      	cmp	r3, #4
 800290e:	d017      	beq.n	8002940 <UART_SetConfig+0x158>
 8002910:	dc1f      	bgt.n	8002952 <UART_SetConfig+0x16a>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <UART_SetConfig+0x134>
 8002916:	2b02      	cmp	r3, #2
 8002918:	d005      	beq.n	8002926 <UART_SetConfig+0x13e>
 800291a:	e01a      	b.n	8002952 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800291c:	f7ff fe0a 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 8002920:	0003      	movs	r3, r0
 8002922:	61bb      	str	r3, [r7, #24]
        break;
 8002924:	e01c      	b.n	8002960 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002926:	4b6b      	ldr	r3, [pc, #428]	@ (8002ad4 <UART_SetConfig+0x2ec>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2207      	movs	r2, #7
 800292e:	4013      	ands	r3, r2
 8002930:	3301      	adds	r3, #1
 8002932:	0019      	movs	r1, r3
 8002934:	4869      	ldr	r0, [pc, #420]	@ (8002adc <UART_SetConfig+0x2f4>)
 8002936:	f7fd fbe7 	bl	8000108 <__udivsi3>
 800293a:	0003      	movs	r3, r0
 800293c:	61bb      	str	r3, [r7, #24]
        break;
 800293e:	e00f      	b.n	8002960 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002940:	f7ff fd98 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002944:	0003      	movs	r3, r0
 8002946:	61bb      	str	r3, [r7, #24]
        break;
 8002948:	e00a      	b.n	8002960 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	61bb      	str	r3, [r7, #24]
        break;
 8002950:	e006      	b.n	8002960 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002956:	231e      	movs	r3, #30
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
        break;
 800295e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d100      	bne.n	8002968 <UART_SetConfig+0x180>
 8002966:	e097      	b.n	8002a98 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800296c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae0 <UART_SetConfig+0x2f8>)
 800296e:	0052      	lsls	r2, r2, #1
 8002970:	5ad3      	ldrh	r3, [r2, r3]
 8002972:	0019      	movs	r1, r3
 8002974:	69b8      	ldr	r0, [r7, #24]
 8002976:	f7fd fbc7 	bl	8000108 <__udivsi3>
 800297a:	0003      	movs	r3, r0
 800297c:	005a      	lsls	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	085b      	lsrs	r3, r3, #1
 8002984:	18d2      	adds	r2, r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	0019      	movs	r1, r3
 800298c:	0010      	movs	r0, r2
 800298e:	f7fd fbbb 	bl	8000108 <__udivsi3>
 8002992:	0003      	movs	r3, r0
 8002994:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d91c      	bls.n	80029d6 <UART_SetConfig+0x1ee>
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	2380      	movs	r3, #128	@ 0x80
 80029a0:	025b      	lsls	r3, r3, #9
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d217      	bcs.n	80029d6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	200e      	movs	r0, #14
 80029ac:	183b      	adds	r3, r7, r0
 80029ae:	210f      	movs	r1, #15
 80029b0:	438a      	bics	r2, r1
 80029b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2207      	movs	r2, #7
 80029bc:	4013      	ands	r3, r2
 80029be:	b299      	uxth	r1, r3
 80029c0:	183b      	adds	r3, r7, r0
 80029c2:	183a      	adds	r2, r7, r0
 80029c4:	8812      	ldrh	r2, [r2, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	183a      	adds	r2, r7, r0
 80029d0:	8812      	ldrh	r2, [r2, #0]
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	e060      	b.n	8002a98 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80029d6:	231e      	movs	r3, #30
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e05b      	b.n	8002a98 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029e0:	231f      	movs	r3, #31
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d01f      	beq.n	8002a2a <UART_SetConfig+0x242>
 80029ea:	dc22      	bgt.n	8002a32 <UART_SetConfig+0x24a>
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d017      	beq.n	8002a20 <UART_SetConfig+0x238>
 80029f0:	dc1f      	bgt.n	8002a32 <UART_SetConfig+0x24a>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <UART_SetConfig+0x214>
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d005      	beq.n	8002a06 <UART_SetConfig+0x21e>
 80029fa:	e01a      	b.n	8002a32 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029fc:	f7ff fd9a 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 8002a00:	0003      	movs	r3, r0
 8002a02:	61bb      	str	r3, [r7, #24]
        break;
 8002a04:	e01c      	b.n	8002a40 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002a06:	4b33      	ldr	r3, [pc, #204]	@ (8002ad4 <UART_SetConfig+0x2ec>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	4013      	ands	r3, r2
 8002a10:	3301      	adds	r3, #1
 8002a12:	0019      	movs	r1, r3
 8002a14:	4831      	ldr	r0, [pc, #196]	@ (8002adc <UART_SetConfig+0x2f4>)
 8002a16:	f7fd fb77 	bl	8000108 <__udivsi3>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	61bb      	str	r3, [r7, #24]
        break;
 8002a1e:	e00f      	b.n	8002a40 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a20:	f7ff fd28 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002a24:	0003      	movs	r3, r0
 8002a26:	61bb      	str	r3, [r7, #24]
        break;
 8002a28:	e00a      	b.n	8002a40 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a2a:	2380      	movs	r3, #128	@ 0x80
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	61bb      	str	r3, [r7, #24]
        break;
 8002a30:	e006      	b.n	8002a40 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a36:	231e      	movs	r3, #30
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
        break;
 8002a3e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d028      	beq.n	8002a98 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a4a:	4b25      	ldr	r3, [pc, #148]	@ (8002ae0 <UART_SetConfig+0x2f8>)
 8002a4c:	0052      	lsls	r2, r2, #1
 8002a4e:	5ad3      	ldrh	r3, [r2, r3]
 8002a50:	0019      	movs	r1, r3
 8002a52:	69b8      	ldr	r0, [r7, #24]
 8002a54:	f7fd fb58 	bl	8000108 <__udivsi3>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	18d2      	adds	r2, r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0019      	movs	r1, r3
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	f7fd fb4c 	bl	8000108 <__udivsi3>
 8002a70:	0003      	movs	r3, r0
 8002a72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b0f      	cmp	r3, #15
 8002a78:	d90a      	bls.n	8002a90 <UART_SetConfig+0x2a8>
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	2380      	movs	r3, #128	@ 0x80
 8002a7e:	025b      	lsls	r3, r3, #9
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d205      	bcs.n	8002a90 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	e003      	b.n	8002a98 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002a90:	231e      	movs	r3, #30
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	226a      	movs	r2, #106	@ 0x6a
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2268      	movs	r2, #104	@ 0x68
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ab4:	231e      	movs	r3, #30
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	781b      	ldrb	r3, [r3, #0]
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b008      	add	sp, #32
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	cfff69f3 	.word	0xcfff69f3
 8002ac8:	ffffcfff 	.word	0xffffcfff
 8002acc:	11fff4ff 	.word	0x11fff4ff
 8002ad0:	40013800 	.word	0x40013800
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40004400 	.word	0x40004400
 8002adc:	02dc6c00 	.word	0x02dc6c00
 8002ae0:	08003350 	.word	0x08003350

08002ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	2208      	movs	r2, #8
 8002af2:	4013      	ands	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a4a      	ldr	r2, [pc, #296]	@ (8002c28 <UART_AdvFeatureConfig+0x144>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	2201      	movs	r2, #1
 8002b14:	4013      	ands	r3, r2
 8002b16:	d00b      	beq.n	8002b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a43      	ldr	r2, [pc, #268]	@ (8002c2c <UART_AdvFeatureConfig+0x148>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	2202      	movs	r2, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	d00b      	beq.n	8002b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a3b      	ldr	r2, [pc, #236]	@ (8002c30 <UART_AdvFeatureConfig+0x14c>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b56:	2204      	movs	r2, #4
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d00b      	beq.n	8002b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4a34      	ldr	r2, [pc, #208]	@ (8002c34 <UART_AdvFeatureConfig+0x150>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	2210      	movs	r2, #16
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a2c      	ldr	r2, [pc, #176]	@ (8002c38 <UART_AdvFeatureConfig+0x154>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	0019      	movs	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d00b      	beq.n	8002bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4a25      	ldr	r2, [pc, #148]	@ (8002c3c <UART_AdvFeatureConfig+0x158>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	2240      	movs	r2, #64	@ 0x40
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d01d      	beq.n	8002bfe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <UART_AdvFeatureConfig+0x15c>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	035b      	lsls	r3, r3, #13
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d10b      	bne.n	8002bfe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a15      	ldr	r2, [pc, #84]	@ (8002c44 <UART_AdvFeatureConfig+0x160>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c02:	2280      	movs	r2, #128	@ 0x80
 8002c04:	4013      	ands	r3, r2
 8002c06:	d00b      	beq.n	8002c20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c48 <UART_AdvFeatureConfig+0x164>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
  }
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	ffff7fff 	.word	0xffff7fff
 8002c2c:	fffdffff 	.word	0xfffdffff
 8002c30:	fffeffff 	.word	0xfffeffff
 8002c34:	fffbffff 	.word	0xfffbffff
 8002c38:	ffffefff 	.word	0xffffefff
 8002c3c:	ffffdfff 	.word	0xffffdfff
 8002c40:	ffefffff 	.word	0xffefffff
 8002c44:	ff9fffff 	.word	0xff9fffff
 8002c48:	fff7ffff 	.word	0xfff7ffff

08002c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b092      	sub	sp, #72	@ 0x48
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2290      	movs	r2, #144	@ 0x90
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c5c:	f7fe f870 	bl	8000d40 <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d12d      	bne.n	8002cce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c74:	2280      	movs	r2, #128	@ 0x80
 8002c76:	0391      	lsls	r1, r2, #14
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4a47      	ldr	r2, [pc, #284]	@ (8002d98 <UART_CheckIdleState+0x14c>)
 8002c7c:	9200      	str	r2, [sp, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f000 f88e 	bl	8002da0 <UART_WaitOnFlagUntilTimeout>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d022      	beq.n	8002cce <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c88:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002c90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c92:	2301      	movs	r3, #1
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c98:	f383 8810 	msr	PRIMASK, r3
}
 8002c9c:	46c0      	nop			@ (mov r8, r8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2180      	movs	r1, #128	@ 0x80
 8002caa:	438a      	bics	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb4:	f383 8810 	msr	PRIMASK, r3
}
 8002cb8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2288      	movs	r2, #136	@ 0x88
 8002cbe:	2120      	movs	r1, #32
 8002cc0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2284      	movs	r2, #132	@ 0x84
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e060      	b.n	8002d90 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d146      	bne.n	8002d6a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cde:	2280      	movs	r2, #128	@ 0x80
 8002ce0:	03d1      	lsls	r1, r2, #15
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d98 <UART_CheckIdleState+0x14c>)
 8002ce6:	9200      	str	r2, [sp, #0]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f000 f859 	bl	8002da0 <UART_WaitOnFlagUntilTimeout>
 8002cee:	1e03      	subs	r3, r0, #0
 8002cf0:	d03b      	beq.n	8002d6a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f383 8810 	msr	PRIMASK, r3
}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4922      	ldr	r1, [pc, #136]	@ (8002d9c <UART_CheckIdleState+0x150>)
 8002d14:	400a      	ands	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f383 8810 	msr	PRIMASK, r3
}
 8002d22:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d24:	f3ef 8310 	mrs	r3, PRIMASK
 8002d28:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d2a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d2e:	2301      	movs	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f383 8810 	msr	PRIMASK, r3
}
 8002d38:	46c0      	nop			@ (mov r8, r8)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2101      	movs	r1, #1
 8002d46:	438a      	bics	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f383 8810 	msr	PRIMASK, r3
}
 8002d54:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	228c      	movs	r2, #140	@ 0x8c
 8002d5a:	2120      	movs	r1, #32
 8002d5c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2284      	movs	r2, #132	@ 0x84
 8002d62:	2100      	movs	r1, #0
 8002d64:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e012      	b.n	8002d90 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2288      	movs	r2, #136	@ 0x88
 8002d6e:	2120      	movs	r1, #32
 8002d70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	228c      	movs	r2, #140	@ 0x8c
 8002d76:	2120      	movs	r1, #32
 8002d78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2284      	movs	r2, #132	@ 0x84
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	0018      	movs	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b010      	add	sp, #64	@ 0x40
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	01ffffff 	.word	0x01ffffff
 8002d9c:	fffffedf 	.word	0xfffffedf

08002da0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db0:	e051      	b.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	3301      	adds	r3, #1
 8002db6:	d04e      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db8:	f7fd ffc2 	bl	8000d40 <HAL_GetTick>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d302      	bcc.n	8002dce <UART_WaitOnFlagUntilTimeout+0x2e>
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e051      	b.n	8002e76 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d03b      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b80      	cmp	r3, #128	@ 0x80
 8002de2:	d038      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b40      	cmp	r3, #64	@ 0x40
 8002de8:	d035      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	2208      	movs	r2, #8
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d111      	bne.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 f83c 	bl	8002e80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2290      	movs	r2, #144	@ 0x90
 8002e0c:	2108      	movs	r1, #8
 8002e0e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2284      	movs	r2, #132	@ 0x84
 8002e14:	2100      	movs	r1, #0
 8002e16:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e02c      	b.n	8002e76 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	2380      	movs	r3, #128	@ 0x80
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	401a      	ands	r2, r3
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d112      	bne.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2280      	movs	r2, #128	@ 0x80
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 f81f 	bl	8002e80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2290      	movs	r2, #144	@ 0x90
 8002e46:	2120      	movs	r1, #32
 8002e48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2284      	movs	r2, #132	@ 0x84
 8002e4e:	2100      	movs	r1, #0
 8002e50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e00f      	b.n	8002e76 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	425a      	negs	r2, r3
 8002e66:	4153      	adcs	r3, r2
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d09e      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b004      	add	sp, #16
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08e      	sub	sp, #56	@ 0x38
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e88:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e8e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e92:	2301      	movs	r3, #1
 8002e94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f383 8810 	msr	PRIMASK, r3
}
 8002e9c:	46c0      	nop			@ (mov r8, r8)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4926      	ldr	r1, [pc, #152]	@ (8002f44 <UART_EndRxTransfer+0xc4>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002eba:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebe:	623b      	str	r3, [r7, #32]
  return(result);
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	f383 8810 	msr	PRIMASK, r3
}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	491b      	ldr	r1, [pc, #108]	@ (8002f48 <UART_EndRxTransfer+0xc8>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d118      	bne.n	8002f26 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002efa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002efe:	2301      	movs	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			@ (mov r8, r8)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2110      	movs	r1, #16
 8002f16:	438a      	bics	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	228c      	movs	r2, #140	@ 0x8c
 8002f2a:	2120      	movs	r1, #32
 8002f2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b00e      	add	sp, #56	@ 0x38
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	fffffedf 	.word	0xfffffedf
 8002f48:	effffffe 	.word	0xeffffffe

08002f4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2284      	movs	r2, #132	@ 0x84
 8002f58:	5c9b      	ldrb	r3, [r3, r2]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_UARTEx_DisableFifoMode+0x16>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e027      	b.n	8002fb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2284      	movs	r2, #132	@ 0x84
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2288      	movs	r2, #136	@ 0x88
 8002f6e:	2124      	movs	r1, #36	@ 0x24
 8002f70:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2101      	movs	r1, #1
 8002f86:	438a      	bics	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002fbc <HAL_UARTEx_DisableFifoMode+0x70>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2288      	movs	r2, #136	@ 0x88
 8002fa4:	2120      	movs	r1, #32
 8002fa6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2284      	movs	r2, #132	@ 0x84
 8002fac:	2100      	movs	r1, #0
 8002fae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b004      	add	sp, #16
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	dfffffff 	.word	0xdfffffff

08002fc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2284      	movs	r2, #132	@ 0x84
 8002fce:	5c9b      	ldrb	r3, [r3, r2]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e02e      	b.n	8003036 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2284      	movs	r2, #132	@ 0x84
 8002fdc:	2101      	movs	r1, #1
 8002fde:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2288      	movs	r2, #136	@ 0x88
 8002fe4:	2124      	movs	r1, #36	@ 0x24
 8002fe6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	08d9      	lsrs	r1, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f854 	bl	80030c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2288      	movs	r2, #136	@ 0x88
 8003028:	2120      	movs	r1, #32
 800302a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2284      	movs	r2, #132	@ 0x84
 8003030:	2100      	movs	r1, #0
 8003032:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b004      	add	sp, #16
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2284      	movs	r2, #132	@ 0x84
 800304e:	5c9b      	ldrb	r3, [r3, r2]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003054:	2302      	movs	r3, #2
 8003056:	e02f      	b.n	80030b8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2284      	movs	r2, #132	@ 0x84
 800305c:	2101      	movs	r1, #1
 800305e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2288      	movs	r2, #136	@ 0x88
 8003064:	2124      	movs	r1, #36	@ 0x24
 8003066:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2101      	movs	r1, #1
 800307c:	438a      	bics	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4a0e      	ldr	r2, [pc, #56]	@ (80030c0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f000 f813 	bl	80030c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2288      	movs	r2, #136	@ 0x88
 80030aa:	2120      	movs	r1, #32
 80030ac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2284      	movs	r2, #132	@ 0x84
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	f1ffffff 	.word	0xf1ffffff

080030c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80030c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d108      	bne.n	80030e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	226a      	movs	r2, #106	@ 0x6a
 80030d8:	2101      	movs	r1, #1
 80030da:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2268      	movs	r2, #104	@ 0x68
 80030e0:	2101      	movs	r1, #1
 80030e2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80030e4:	e043      	b.n	800316e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80030e6:	260f      	movs	r6, #15
 80030e8:	19bb      	adds	r3, r7, r6
 80030ea:	2208      	movs	r2, #8
 80030ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80030ee:	200e      	movs	r0, #14
 80030f0:	183b      	adds	r3, r7, r0
 80030f2:	2208      	movs	r2, #8
 80030f4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	0e5b      	lsrs	r3, r3, #25
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	240d      	movs	r4, #13
 8003102:	193b      	adds	r3, r7, r4
 8003104:	2107      	movs	r1, #7
 8003106:	400a      	ands	r2, r1
 8003108:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	0f5b      	lsrs	r3, r3, #29
 8003112:	b2da      	uxtb	r2, r3
 8003114:	250c      	movs	r5, #12
 8003116:	197b      	adds	r3, r7, r5
 8003118:	2107      	movs	r1, #7
 800311a:	400a      	ands	r2, r1
 800311c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800311e:	183b      	adds	r3, r7, r0
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	197a      	adds	r2, r7, r5
 8003124:	7812      	ldrb	r2, [r2, #0]
 8003126:	4914      	ldr	r1, [pc, #80]	@ (8003178 <UARTEx_SetNbDataToProcess+0xb4>)
 8003128:	5c8a      	ldrb	r2, [r1, r2]
 800312a:	435a      	muls	r2, r3
 800312c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800312e:	197b      	adds	r3, r7, r5
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	4a12      	ldr	r2, [pc, #72]	@ (800317c <UARTEx_SetNbDataToProcess+0xb8>)
 8003134:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003136:	0019      	movs	r1, r3
 8003138:	f7fd f870 	bl	800021c <__divsi3>
 800313c:	0003      	movs	r3, r0
 800313e:	b299      	uxth	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	226a      	movs	r2, #106	@ 0x6a
 8003144:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003146:	19bb      	adds	r3, r7, r6
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	193a      	adds	r2, r7, r4
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	490a      	ldr	r1, [pc, #40]	@ (8003178 <UARTEx_SetNbDataToProcess+0xb4>)
 8003150:	5c8a      	ldrb	r2, [r1, r2]
 8003152:	435a      	muls	r2, r3
 8003154:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003156:	193b      	adds	r3, r7, r4
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	4a08      	ldr	r2, [pc, #32]	@ (800317c <UARTEx_SetNbDataToProcess+0xb8>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800315e:	0019      	movs	r1, r3
 8003160:	f7fd f85c 	bl	800021c <__divsi3>
 8003164:	0003      	movs	r3, r0
 8003166:	b299      	uxth	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2268      	movs	r2, #104	@ 0x68
 800316c:	5299      	strh	r1, [r3, r2]
}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b005      	add	sp, #20
 8003174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	08003368 	.word	0x08003368
 800317c:	08003370 	.word	0x08003370

08003180 <memset>:
 8003180:	0003      	movs	r3, r0
 8003182:	1882      	adds	r2, r0, r2
 8003184:	4293      	cmp	r3, r2
 8003186:	d100      	bne.n	800318a <memset+0xa>
 8003188:	4770      	bx	lr
 800318a:	7019      	strb	r1, [r3, #0]
 800318c:	3301      	adds	r3, #1
 800318e:	e7f9      	b.n	8003184 <memset+0x4>

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	2600      	movs	r6, #0
 8003194:	4c0c      	ldr	r4, [pc, #48]	@ (80031c8 <__libc_init_array+0x38>)
 8003196:	4d0d      	ldr	r5, [pc, #52]	@ (80031cc <__libc_init_array+0x3c>)
 8003198:	1b64      	subs	r4, r4, r5
 800319a:	10a4      	asrs	r4, r4, #2
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	2600      	movs	r6, #0
 80031a2:	f000 f819 	bl	80031d8 <_init>
 80031a6:	4c0a      	ldr	r4, [pc, #40]	@ (80031d0 <__libc_init_array+0x40>)
 80031a8:	4d0a      	ldr	r5, [pc, #40]	@ (80031d4 <__libc_init_array+0x44>)
 80031aa:	1b64      	subs	r4, r4, r5
 80031ac:	10a4      	asrs	r4, r4, #2
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	00b3      	lsls	r3, r6, #2
 80031b6:	58eb      	ldr	r3, [r5, r3]
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	00b3      	lsls	r3, r6, #2
 80031c0:	58eb      	ldr	r3, [r5, r3]
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08003378 	.word	0x08003378
 80031cc:	08003378 	.word	0x08003378
 80031d0:	0800337c 	.word	0x0800337c
 80031d4:	08003378 	.word	0x08003378

080031d8 <_init>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr

080031e4 <_fini>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr
